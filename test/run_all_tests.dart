#!/usr/bin/env dart

import 'dart:convert';
import 'dart:io';

/// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é
class TestRunner {
  static const String testDir = 'test/';
  
  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
  static Future<void> runAllTests() async {
    // ignore: avoid_print
    print('üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...\n');
    
    final startTime = DateTime.now();
    
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
      final result = await Process.run(
        'flutter',
        [
          'test',
          '--reporter=expanded',
          '--coverage',
          '--test-randomize-ordering-seed=random',
        ],
        workingDirectory: '.',
      );
      
      final endTime = DateTime.now();
      final duration = endTime.difference(startTime);
      
      // ignore: avoid_print
      print('\n${'='*50}');
      // ignore: avoid_print
      print('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
      // ignore: avoid_print
      print('='*50);
      // ignore: avoid_print
      print('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.inSeconds}—Å');
      // ignore: avoid_print
      print('–ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${result.exitCode}');
      
      if (result.exitCode == 0) {
        // ignore: avoid_print
        print('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
        await _generateCoverageReport();
      } else {
        // ignore: avoid_print
        print('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å');
        // ignore: avoid_print
        print('\n–í—ã–≤–æ–¥ –æ—à–∏–±–æ–∫:');
        // ignore: avoid_print
        print(result.stderr);
      }
      
      // ignore: avoid_print
      print('\n–í—ã–≤–æ–¥ —Ç–µ—Å—Ç–æ–≤:');
      // ignore: avoid_print
      print(result.stdout);
      
    } catch (e) {
      // ignore: avoid_print
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: $e');
      exit(1);
    }
  }
  
  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  static Future<void> runTestsByCategory() async {
    final categories = [
      TestCategory('Unit Tests', 'test/unit/'),
      TestCategory('Widget Tests', 'test/widgets/'),
      TestCategory('Integration Tests', 'test/integration/'),
    ];
    
    for (final category in categories) {
      await _runCategoryTests(category);
    }
  }
  
  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  static Future<void> _runCategoryTests(TestCategory category) async {
    // ignore: avoid_print
    print('\nüè∑Ô∏è  –ó–∞–ø—É—Å–∫ ${category.name}...');
    
    final categoryDir = Directory(category.path);
    if (!categoryDir.existsSync()) {
      // ignore: avoid_print
      print('‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${category.path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    final testFiles = categoryDir
        .listSync(recursive: true)
        .whereType<File>()
        .where((file) => file.path.endsWith('_test.dart'))
        .toList();
    
    if (testFiles.isEmpty) {
      // ignore: avoid_print
      print('‚ÑπÔ∏è  –¢–µ—Å—Ç—ã –≤ ${category.path} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    // ignore: avoid_print
    print('üìÅ –ù–∞–π–¥–µ–Ω–æ ${testFiles.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤');
    
    try {
      final result = await Process.run(
        'flutter',
        ['test', category.path, '--reporter=compact'],
        workingDirectory: '.',
      );
      
      if (result.exitCode == 0) {
        // ignore: avoid_print
        print('‚úÖ ${category.name}: –£–°–ü–ï–®–ù–û');
      } else {
        // ignore: avoid_print
        print('‚ùå ${category.name}: –ü–†–û–í–ê–õ–ï–ù–û');
        // ignore: avoid_print
        print('–û—à–∏–±–∫–∏:\n${result.stderr}');
      }
      
    } catch (e) {
      // ignore: avoid_print
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ${category.name}: $e');
    }
  }
  
  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
  static Future<void> _generateCoverageReport() async {
    // ignore: avoid_print
    print('\nüìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏...');
    
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
      final result = await Process.run(
        'genhtml',
        [
          'coverage/lcov.info',
          '-o',
          'coverage/html',
        ],
        workingDirectory: '.',
      );
      
      if (result.exitCode == 0) {
        // ignore: avoid_print
        print('‚úÖ –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Å–æ–∑–¥–∞–Ω: coverage/html/index.html');
      } else {
        // ignore: avoid_print
        print('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å HTML –æ—Ç—á–µ—Ç (genhtml –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω?)');
        await _parseBasicCoverage();
      }
      
    } catch (e) {
      // ignore: avoid_print
      print('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: $e');
      await _parseBasicCoverage();
    }
  }
  
  /// –ü–∞—Ä—Å–∏—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
  static Future<void> _parseBasicCoverage() async {
    final coverageFile = File('coverage/lcov.info');
    if (!coverageFile.existsSync()) {
      // ignore: avoid_print
      print('‚ö†Ô∏è  –§–∞–π–ª –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    try {
      final content = await coverageFile.readAsString();
      final lines = content.split('\n');
      
      int totalLines = 0;
      int coveredLines = 0;
      
      for (final line in lines) {
        if (line.startsWith('LF:')) {
          totalLines += int.parse(line.substring(3));
        } else if (line.startsWith('LH:')) {
          coveredLines += int.parse(line.substring(3));
        }
      }
      
      if (totalLines > 0) {
        final percentage = (coveredLines / totalLines * 100).toStringAsFixed(1);
        // ignore: avoid_print
        print('üìä –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞: $percentage% ($coveredLines/$totalLines —Å—Ç—Ä–æ–∫)');
      }
      
    } catch (e) {
      // ignore: avoid_print
      print('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–æ–∫—Ä—ã—Ç–∏—è: $e');
    }
  }
  
  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  static Future<void> runPerformanceTests() async {
    // ignore: avoid_print
    print('\n‚ö° –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
    
    final performanceTests = [
      'test/performance/',
      'test/widgets/**/performance_*.dart',
    ];
    
    for (final testPattern in performanceTests) {
      final result = await Process.run(
        'flutter',
        [
          'test',
          testPattern,
          '--reporter=json',
          '--concurrency=1', // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
        ],
        workingDirectory: '.',
      );
      
      if (result.exitCode == 0) {
        _parsePerformanceResults(result.stdout);
      }
    }
  }
  
  /// –ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  static void _parsePerformanceResults(String jsonOutput) {
    try {
      final lines = jsonOutput.split('\n');
      final slowTests = <String>[];
      
      for (final line in lines) {
        if (line.trim().isEmpty) continue;
        
        final json = jsonDecode(line);
        if (json['type'] == 'test' && json['result'] == 'success') {
          final time = json['time'] as int?;
          if (time != null && time > 5000) { // –¢–µ—Å—Ç—ã –º–µ–¥–ª–µ–Ω–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥
            slowTests.add('${json['name']}: ${time}ms');
          }
        }
      }
      
      if (slowTests.isNotEmpty) {
        // ignore: avoid_print
        print('üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:');
        for (final test in slowTests) {
          // ignore: avoid_print
          print('  - $test');
        }
      } else {
        // ignore: avoid_print
        print('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±—ã—Å—Ç—Ä–æ');
      }
      
    } catch (e) {
      // ignore: avoid_print
      print('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: $e');
    }
  }
  
  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
  static Future<void> runFailedTests() async {
    // ignore: avoid_print
    print('\nüîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å –æ–ø—Ü–∏–µ–π --reporter=json –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    final result = await Process.run(
      'flutter',
      ['test', '--reporter=json'],
      workingDirectory: '.',
    );
    
    if (result.exitCode == 0) {
      // ignore: avoid_print
      print('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
      return;
    }
    
    final failedTests = <String>[];
    final lines = result.stdout.toString().split('\n');
    
    for (final line in lines) {
      if (line.trim().isEmpty) continue;
      
      try {
        final json = jsonDecode(line);
        if (json['type'] == 'test' && json['result'] == 'error') {
          failedTests.add(json['url']);
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
      }
    }
    
    if (failedTests.isNotEmpty) {
      // ignore: avoid_print
      print('üéØ –ù–∞–π–¥–µ–Ω–æ ${failedTests.length} –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤');
      
      for (final testFile in failedTests) {
        // ignore: avoid_print
        print('\nüß™ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫: $testFile');
        
        final retryResult = await Process.run(
          'flutter',
          ['test', testFile, '--reporter=expanded'],
          workingDirectory: '.',
        );
        
        if (retryResult.exitCode == 0) {
          // ignore: avoid_print
          print('‚úÖ $testFile: –ò–°–ü–†–ê–í–õ–ï–ù');
        } else {
          // ignore: avoid_print
          print('‚ùå $testFile: –í–°–ï –ï–©–ï –ü–†–û–í–ê–õ–ï–ù');
          // ignore: avoid_print
          print(retryResult.stdout);
        }
      }
    }
  }
  
  /// –û—á–∏—â–∞–µ—Ç –∫—ç—à —Ç–µ—Å—Ç–æ–≤
  static Future<void> cleanTestCache() async {
    // ignore: avoid_print
    print('üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ç–µ—Å—Ç–æ–≤...');
    
    final cacheDirectories = [
      '.dart_tool/test/',
      'coverage/',
      'test/.test_coverage.dart',
    ];
    
    for (final dir in cacheDirectories) {
      final directory = Directory(dir);
      if (directory.existsSync()) {
        await directory.delete(recursive: true);
        // ignore: avoid_print
        print('üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ: $dir');
      }
    }
    
    // ignore: avoid_print
    print('‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω');
  }
}

class TestCategory {
  final String name;
  final String path;
  
  TestCategory(this.name, this.path);
}

void main(List<String> args) async {
  if (args.isEmpty) {
    await TestRunner.runAllTests();
    return;
  }
  
  switch (args[0]) {
    case '--categories':
      await TestRunner.runTestsByCategory();
      break;
    case '--performance':
      await TestRunner.runPerformanceTests();
      break;
    case '--failed':
      await TestRunner.runFailedTests();
      break;
    case '--clean':
      await TestRunner.cleanTestCache();
      break;
    case '--help':
      _printHelp();
      break;
    default:
      // ignore: avoid_print
      print('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${args[0]}');
      _printHelp();
      exit(1);
  }
}

void _printHelp() {
  // ignore: avoid_print
  print('''
üß™ Test Runner - –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  dart test/run_all_tests.dart [–∫–æ–º–∞–Ω–¥–∞]

–ö–æ–º–∞–Ω–¥—ã:
  (–±–µ–∑ –∫–æ–º–∞–Ω–¥—ã)  –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
  --categories   –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  --performance  –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  --failed       –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
  --clean        –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Ç–µ—Å—Ç–æ–≤
  --help         –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  dart test/run_all_tests.dart
  dart test/run_all_tests.dart --categories
  dart test/run_all_tests.dart --performance
''');
}