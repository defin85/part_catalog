import 'package:flutter/foundation.dart';
import 'package:flutter_test/flutter_test.dart';

/// Error handler –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
class TestErrorHandler {
  static final List<FlutterErrorDetails> _capturedErrors = [];
  static FlutterExceptionHandler? _originalOnError;

  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  static void setupErrorCapture() {
    _originalOnError = FlutterError.onError;
    _capturedErrors.clear();
    
    FlutterError.onError = (FlutterErrorDetails details) {
      _capturedErrors.add(details);
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      // ignore: avoid_print
      print('üö® Test Error Captured: ${details.exception}');
      if (details.stack != null) {
        // ignore: avoid_print
        print('üìç Stack trace: ${details.stack}');
      }
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      _originalOnError?.call(details);
    };
  }

  /// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  static void restoreErrorHandler() {
    FlutterError.onError = _originalOnError;
    _capturedErrors.clear();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
  static List<FlutterErrorDetails> getCapturedErrors() {
    return List.unmodifiable(_capturedErrors);
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ overflow –æ—à–∏–±–æ–∫
  static List<FlutterErrorDetails> getOverflowErrors() {
    return _capturedErrors.where((error) {
      final message = error.exception.toString().toLowerCase();
      return message.contains('overflow') || 
             message.contains('renderflex') ||
             message.contains('pixels');
    }).toList();
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  static List<FlutterErrorDetails> getRenderErrors() {
    return _capturedErrors.where((error) {
      final message = error.exception.toString().toLowerCase();
      return message.contains('render') || 
             message.contains('layout') ||
             message.contains('constraint');
    }).toList();
  }

  /// –û—á–∏—â–∞–µ—Ç –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
  static void clearErrors() {
    _capturedErrors.clear();
  }

  /// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Ç–µ—Å—Ç–∞—Ö
  static Future<T> expectNoErrors<T>(
    Future<T> Function() testFunction, {
    String? testName,
  }) async {
    setupErrorCapture();
    
    try {
      final result = await testFunction();
      
      if (_capturedErrors.isNotEmpty) {
        // ignore: avoid_print
        print('‚ö†Ô∏è Test "$testName" captured ${_capturedErrors.length} errors:');
        for (final error in _capturedErrors) {
          // ignore: avoid_print
          print('  - ${error.exception}');
        }
        fail('Test captured unexpected errors: ${_capturedErrors.length}');
      }
      
      return result;
    } finally {
      restoreErrorHandler();
    }
  }

  /// –û–∂–∏–¥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–µ
  static Future<T> expectSpecificErrors<T>(
    Future<T> Function() testFunction, {
    required List<String> expectedErrors,
    String? testName,
  }) async {
    setupErrorCapture();
    
    try {
      final result = await testFunction();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –æ–∂–∏–¥–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏
      for (final expectedError in expectedErrors) {
        final found = _capturedErrors.any((error) =>
          error.exception.toString().contains(expectedError));
        
        if (!found) {
          fail('Expected error "$expectedError" was not captured in test "$testName"');
        }
      }
      
      return result;
    } finally {
      restoreErrorHandler();
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π wrapper —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  static void testWidgetsWithErrorHandling(
    String description,
    Future<void> Function(WidgetTester) testFunction, {
    bool expectNoErrors = true,
    List<String>? expectedErrors,
  }) {
    testWidgets(description, (tester) async {
      if (expectNoErrors) {
        await TestErrorHandler.expectNoErrors(
          () => testFunction(tester),
          testName: description,
        );
      } else if (expectedErrors != null) {
        await TestErrorHandler.expectSpecificErrors(
          () => testFunction(tester),
          expectedErrors: expectedErrors,
          testName: description,
        );
      } else {
        await testFunction(tester);
      }
    });
  }
}