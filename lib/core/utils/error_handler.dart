import 'package:logger/logger.dart';

/// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö.
/// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
class ErrorHandler {
  ErrorHandler._(); // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä

  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞—á–∞–ª–∞, –∫–æ–Ω—Ü–∞ –∏ –æ—à–∏–±–æ–∫.
  ///
  /// [operation] - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  /// [logger] - —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏–π
  /// [operationName] - –∏–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  /// [defaultValue] - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  /// [rethrowError] - –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞—Ç—å –ª–∏ –æ—à–∏–±–∫—É –ø–æ—Å–ª–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
  ///
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ defaultValue –ø—Ä–∏ –æ—à–∏–±–∫–µ.
  static Future<T> executeWithLogging<T>({
    required Future<T> Function() operation,
    required Logger logger,
    required String operationName,
    T? defaultValue,
    bool rethrowError = true,
  }) async {
    try {
      logger.i('üöÄ Starting $operationName');
      final stopwatch = Stopwatch()..start();

      final result = await operation();

      stopwatch.stop();
      logger.i(
          '‚úÖ Completed $operationName in ${stopwatch.elapsedMilliseconds}ms');

      return result;
    } catch (error, stackTrace) {
      logger.e(
        '‚ùå Error in $operationName',
        error: error,
        stackTrace: stackTrace,
      );

      if (rethrowError) {
        rethrow;
      }

      if (defaultValue != null) {
        logger.w('‚ö†Ô∏è Returning default value for $operationName');
        return defaultValue;
      }

      throw Exception('Operation $operationName failed: $error');
    }
  }

  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
  ///
  /// [operation] - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  /// [logger] - —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏–π
  /// [operationName] - –∏–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  /// [defaultValue] - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  /// [rethrowError] - –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞—Ç—å –ª–∏ –æ—à–∏–±–∫—É –ø–æ—Å–ª–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
  ///
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ defaultValue –ø—Ä–∏ –æ—à–∏–±–∫–µ.
  static T executeSync<T>({
    required T Function() operation,
    required Logger logger,
    required String operationName,
    T? defaultValue,
    bool rethrowError = true,
  }) {
    try {
      logger.i('üöÄ Starting $operationName');
      final stopwatch = Stopwatch()..start();

      final result = operation();

      stopwatch.stop();
      logger.i(
          '‚úÖ Completed $operationName in ${stopwatch.elapsedMilliseconds}ms');

      return result;
    } catch (error, stackTrace) {
      logger.e(
        '‚ùå Error in $operationName',
        error: error,
        stackTrace: stackTrace,
      );

      if (rethrowError) {
        rethrow;
      }

      if (defaultValue != null) {
        logger.w('‚ö†Ô∏è Returning default value for $operationName');
        return defaultValue;
      }

      throw Exception('Operation $operationName failed: $error');
    }
  }

  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ.
  ///
  /// [operation] - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  /// [logger] - —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏–π
  /// [operationName] - –∏–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  /// [maxAttempts] - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
  /// [retryDelay] - –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —Å–µ–∫—É–Ω–¥–∞)
  /// [shouldRetry] - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω—É–∂–Ω–∞ –ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
  ///
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏.
  static Future<T> executeWithRetry<T>({
    required Future<T> Function() operation,
    required Logger logger,
    required String operationName,
    int maxAttempts = 3,
    Duration retryDelay = const Duration(seconds: 1),
    bool Function(dynamic error)? shouldRetry,
  }) async {
    int attempt = 0;

    while (attempt < maxAttempts) {
      attempt++;

      try {
        logger.i('üîÑ Attempt $attempt/$maxAttempts for $operationName');
        return await executeWithLogging(
          operation: operation,
          logger: logger,
          operationName: '$operationName (attempt $attempt)',
        );
      } catch (error) {
        final shouldRetryError = shouldRetry?.call(error) ?? true;

        if (attempt >= maxAttempts || !shouldRetryError) {
          logger.e('‚ùå All attempts failed for $operationName');
          rethrow;
        }

        logger.w(
          '‚ö†Ô∏è Attempt $attempt failed for $operationName, '
          'retrying in ${retryDelay.inSeconds}s...',
        );

        await Future.delayed(retryDelay);
      }
    }

    throw Exception('All retry attempts failed for $operationName');
  }

  /// –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.
  ///
  /// [operations] - –∫–∞—Ä—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–π (–∏–º—è -> –æ–ø–µ—Ä–∞—Ü–∏—è)
  /// [logger] - —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏–π
  /// [stopOnError] - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false)
  ///
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∏–º—è -> —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞).
  static Future<Map<String, dynamic>> executeBatch({
    required Map<String, Future<dynamic> Function()> operations,
    required Logger logger,
    bool stopOnError = false,
  }) async {
    logger
        .i('üöÄ Starting batch execution with ${operations.length} operations');
    final results = <String, dynamic>{};

    if (stopOnError) {
      // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø—Ä–∏ –æ—à–∏–±–∫–µ
      for (final entry in operations.entries) {
        try {
          results[entry.key] = await executeWithLogging(
            operation: entry.value,
            logger: logger,
            operationName: entry.key,
          );
        } catch (error) {
          results[entry.key] = error;
          logger.e('‚ùå Batch execution stopped due to error in ${entry.key}');
          break;
        }
      }
    } else {
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      final futures = operations.entries.map((entry) async {
        try {
          final result = await executeWithLogging(
            operation: entry.value,
            logger: logger,
            operationName: entry.key,
            rethrowError: false,
          );
          return MapEntry(entry.key, result);
        } catch (error) {
          return MapEntry(entry.key, error);
        }
      });

      final entries = await Future.wait(futures);
      results.addEntries(entries);
    }

    final successCount = results.values.where((v) => v is! Exception).length;
    logger.i(
        '‚úÖ Batch execution completed: $successCount/${operations.length} succeeded');

    return results;
  }
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è Logger –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
extension LoggerExtensions on Logger {
  /// –õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏.
  void logStart(String operation) => i('üöÄ Starting $operation');

  /// –õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
  void logSuccess(String operation, {Duration? duration}) {
    final durationStr =
        duration != null ? ' in ${duration.inMilliseconds}ms' : '';
    i('‚úÖ Completed $operation$durationStr');
  }

  /// –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –æ–ø–µ—Ä–∞—Ü–∏–∏.
  void logError(String operation, dynamic error, [StackTrace? stackTrace]) {
    e('‚ùå Error in $operation', error: error, stackTrace: stackTrace);
  }

  /// –õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.
  void logWarning(String message) => w('‚ö†Ô∏è $message');

  /// –õ–æ–≥–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
  void logPerformance(String operation, Duration duration) {
    d('‚è±Ô∏è $operation took ${duration.inMilliseconds}ms');
  }
}
