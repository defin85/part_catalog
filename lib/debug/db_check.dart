import 'package:flutter/foundation.dart';

import 'package:part_catalog/core/database/database.dart';
import 'package:part_catalog/core/service_locator.dart';
import 'package:part_catalog/core/utils/logger_config.dart';

/// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–∞–±–ª–∏—Ü—ã supplier_settings
/// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
Future<void> checkSupplierSettingsTable() async {
  if (!kDebugMode) return; // –¢–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ

  final logger = AppLoggers.database;

  try {
    logger.i('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã supplier_settings');

    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    final database = locator<AppDatabase>();

    logger.i('\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ===');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
    final tableExists = await database
        .customSelect(
            "SELECT name FROM sqlite_master WHERE type='table' AND name='supplier_settings'")
        .get();

    if (tableExists.isEmpty) {
      logger.e('‚ùå –¢–∞–±–ª–∏—Ü–∞ supplier_settings –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
      return;
    }

    logger.i('‚úÖ –¢–∞–±–ª–∏—Ü–∞ supplier_settings —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    final structure = await database
        .customSelect('PRAGMA table_info(supplier_settings)')
        .get();

    logger.i('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:');
    for (final row in structure) {
      final name = row.data['name'];
      final type = row.data['type'];
      final notNull = row.data['notnull'] == 1 ? 'NOT NULL' : 'NULL';
      final defaultValue = row.data['dflt_value'];
      logger.i(
          '  - $name: $type ($notNull)${defaultValue != null ? ' DEFAULT $defaultValue' : ''}');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã
    logger.i('\n=== –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã ===');
    final allSettings =
        await database.supplierSettingsDao.getAllSupplierSettings();

    if (allSettings.isEmpty) {
      logger.i('üì≠ –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞');
    } else {
      logger.i('üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${allSettings.length}');

      for (int i = 0; i < allSettings.length; i++) {
        final setting = allSettings[i];
        logger.i('\n--- –ó–∞–ø–∏—Å—å ${i + 1} ---');
        logger.i('  ID: ${setting.id}');
        logger.i('  Supplier Code: ${setting.supplierCode}');
        logger.i('  Is Enabled: ${setting.isEnabled}');
        logger.i(
            '  Has Encrypted Credentials: ${setting.encryptedCredentials != null}');
        if (setting.encryptedCredentials != null) {
          logger.i(
              '  Credentials Length: ${setting.encryptedCredentials!.length} —Å–∏–º–≤–æ–ª–æ–≤');
        }
        logger.i(
            '  Last Check Status: ${setting.lastCheckStatus ?? '–ù–µ –ø—Ä–æ–≤–µ—Ä—è–ª—Å—è'}');
        logger.i('  Created At: ${setting.createdAt}');
        logger.i('  Updated At: ${setting.updatedAt}');

        if (setting.additionalConfig != null) {
          logger.i(
              '  Additional Config Length: ${setting.additionalConfig!.length} —Å–∏–º–≤–æ–ª–æ–≤');
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
          final config = setting.additionalConfig!;
          if (config.length > 200) {
            logger.d('  Config Preview: ${config.substring(0, 200)}...');
          } else {
            logger.d('  Config: $config');
          }
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã —Ç–∞–±–ª–∏—Ü—ã
    logger.i('\n=== –ò–Ω–¥–µ–∫—Å—ã —Ç–∞–±–ª–∏—Ü—ã ===');
    final indexes = await database
        .customSelect(
            "SELECT name, sql FROM sqlite_master WHERE type='index' AND tbl_name='supplier_settings'")
        .get();

    if (indexes.isEmpty) {
      logger.i('  –ò–Ω–¥–µ–∫—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    } else {
      for (final index in indexes) {
        logger.i('  - ${index.data['name']}: ${index.data['sql']}');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ
    logger.i('\n=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü ===');
    final tables = await database
        .customSelect(
            "SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'")
        .get();

    for (final tableRow in tables) {
      final tableName = tableRow.data['name'];
      final count = await database
          .customSelect('SELECT COUNT(*) as count FROM $tableName')
          .get();
      final recordCount = count.first.data['count'];
      logger.i('  $tableName: $recordCount –∑–∞–ø–∏—Å–µ–π');
    }

    logger.i('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  } catch (e, stackTrace) {
    logger.e('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $e',
        error: e, stackTrace: stackTrace);
  }
}
