import 'package:part_catalog/core/api/optimized_api_client_factory.dart';
import 'package:part_catalog/core/utils/logger_config.dart';
import 'package:part_catalog/features/parts_catalog/api/optimized_api_client_parts_catalogs.dart';
import 'package:part_catalog/features/suppliers/api/api_client_manager.dart';
import 'package:part_catalog/features/suppliers/api/api_connection_mode.dart';
import 'package:part_catalog/features/suppliers/api/implementations/optimized_armtek_api_client.dart';

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ API –∫–ª–∏–µ–Ω—Ç–∞ Armtek
class ArmtekApiExample {
  static final _logger = AppLoggers.suppliers;

  /// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Armtek –∫–ª–∏–µ–Ω—Ç–∞
  static Future<void> demonstrateArmtekApiUsage() async {
    _logger.i('=== –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Armtek API ===');

    try {
      // 1. –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
      final armtekClient = await OptimizedArmtekApiClient.create(
        connectionMode: ApiConnectionMode.direct,
        username: 'your_username',
        password: 'your_password',
        vkorg: '1000',
      );

      _logger.i('‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Armtek –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
      final circuitBreakerStatus = armtekClient.getCircuitBreakerStatus();
      _logger.i('Circuit breaker —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${circuitBreakerStatus['state']}');

      // 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ health check
      final isHealthy = await armtekClient.performHealthCheck();
      _logger.i('Health check —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${isHealthy ? "‚úÖ Healthy" : "‚ùå Unhealthy"}');

      // 4. Ping —Å–µ—Ä–≤–∏—Å–∞ (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
      _logger.i('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ping —Å–µ—Ä–≤–∏—Å–∞...');
      final pingResponse = await armtekClient.pingService();
      
      if (pingResponse.status == 200) {
        _logger.i('‚úÖ Ping —É—Å–ø–µ—à–µ–Ω: IP ${pingResponse.responseData?.ip}');
      } else {
        _logger.w('‚ùå Ping –Ω–µ—É–¥–∞—á–µ–Ω: —Å—Ç–∞—Ç—É—Å ${pingResponse.status}');
      }

      // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—Ä–µ–Ω–¥–æ–≤ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞ 24 —á–∞—Å–∞)
      _logger.i('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—Ä–µ–Ω–¥–æ–≤...');
      final brandsResponse = await armtekClient.getBrandList('1000');
      
      if (brandsResponse.status == 200) {
        final brands = brandsResponse.responseData ?? [];
        _logger.i('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${brands.length} –±—Ä–µ–Ω–¥–æ–≤ (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ 24 —á–∞—Å–∞)');
      }

      // 6. –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π —Å retry –ª–æ–≥–∏–∫–æ–π
      _logger.i('–ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏...');
      final parts = await armtekClient.getPricesByArticle(
        '1234567890',
        brand: 'BOSCH',
      );
      
      _logger.i('‚úÖ –ù–∞–π–¥–µ–Ω–æ ${parts.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π');

      // 7. –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      final metrics = armtekClient.getMetrics();
      if (metrics != null) {
        _logger.i('üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
        metrics.forEach((endpoint, stats) {
          _logger.i('  $endpoint: ${stats['avgResponseTime']} avg, ${stats['errorRate']}% errors');
        });
      }

      // 8. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞
      final cacheStats = armtekClient.getCacheStats();
      if (cacheStats != null) {
        _logger.i('üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: ${cacheStats['hitRate']}% hit rate, '
            '${cacheStats['itemCount']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
      }

      // 9. –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
      armtekClient.dispose();
      _logger.i('‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');

    } catch (e, stackTrace) {
      _logger.e('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ Armtek API', error: e, stackTrace: stackTrace);
    }
  }
}

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –∑–∞–ø—á–∞—Å—Ç–µ–π
class PartsCatalogApiExample {
  static final _logger = AppLoggers.suppliers;

  /// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
  static Future<void> demonstratePartsCatalogUsage() async {
    _logger.i('=== –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Parts Catalog API ===');

    try {
      // 1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
      final catalogClient = OptimizedApiClientPartsCatalogs.create(
        apiKey: 'your_api_key',
        language: 'ru',
      );

      _logger.i('‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Parts Catalog –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω');

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
      final isHealthy = await catalogClient.performHealthCheck();
      _logger.i('Health check: ${isHealthy ? "‚úÖ Healthy" : "‚ùå Unhealthy"}');

      // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ (–∫—ç—à–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 24 —á–∞—Å–∞)
      _logger.i('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤...');
      final catalogs = await catalogClient.getCatalogs();
      _logger.i('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${catalogs.length} –∫–∞—Ç–∞–ª–æ–≥–æ–≤ (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ 24 —á–∞—Å–∞)');

      // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –ø–æ VIN
      if (catalogs.isNotEmpty) {
        _logger.i('–ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ VIN...');
        final carInfo = await catalogClient.getCarInfo('WVWZZZ1JZ3W386752');
        _logger.i('‚úÖ –ù–∞–π–¥–µ–Ω–æ ${carInfo.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ VIN');
      }

      // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      final metrics = catalogClient.getMetrics();
      if (metrics != null) {
        _logger.i('üìä –ú–µ—Ç—Ä–∏–∫–∏ Parts Catalog:');
        metrics.forEach((endpoint, stats) {
          _logger.i('  $endpoint: ${stats['totalRequests']} –∑–∞–ø—Ä–æ—Å–æ–≤, '
              '${stats['errorRate']}% –æ—à–∏–±–æ–∫');
        });
      }

      // 6. –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      await catalogClient.clearCache();
      _logger.i('üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω');

      // 7. –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
      catalogClient.dispose();
      _logger.i('‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');

    } catch (e, stackTrace) {
      _logger.e('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ Parts Catalog API', error: e, stackTrace: stackTrace);
    }
  }
}

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ApiClientManager —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
class ApiClientManagerExample {
  static final _logger = AppLoggers.suppliers;

  /// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å ApiClientManager
  static Future<void> demonstrateApiClientManager() async {
    _logger.i('=== –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ApiClientManager ===');

    try {
      // 1. –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
      final manager = ApiClientManager();
      
      // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä—è–º—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
      await manager.initialize(
        mode: ApiConnectionMode.direct,
      );
      _logger.i('‚úÖ ApiClientManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ direct');

      // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
      final optimizedClient = await manager.getOptimizedClient(
        supplierCode: 'armtek',
        username: 'test_user',
        password: 'test_password',
        vkorg: '1000',
      );

      if (optimizedClient != null) {
        _logger.i('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç');

        // 4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        final response = await optimizedClient.get('/ws_ping/index');
        _logger.i('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω: —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      }

      // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—Å–µ—Ö API
      final healthReport = manager.generateHealthReport();
      _logger.i('üìã –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ API:');
      _logger.i('  –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${healthReport['summary']['totalClients']}');
      _logger.i('  –ó–¥–æ—Ä–æ–≤—ã—Ö: ${healthReport['summary']['healthyClients']}');
      _logger.i('  –ù–µ–∑–¥–æ—Ä–æ–≤—ã—Ö: ${healthReport['summary']['unhealthyClients']}');

      // 6. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ health check –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
      final healthResults = await manager.performHealthCheckAll();
      _logger.i('üè• –†–µ–∑—É–ª—å—Ç–∞—Ç—ã health check:');
      healthResults.forEach((clientName, isHealthy) {
        _logger.i('  $clientName: ${isHealthy ? "‚úÖ" : "‚ùå"}');
      });

      // 7. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      final performanceStats = manager.getPerformanceStats();
      _logger.i('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
      _logger.i('  –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${performanceStats['totalClients']}');

      // 8. –°–±—Ä–æ—Å –≤—Å–µ—Ö circuit breakers –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      manager.resetAllCircuitBreakers();
      _logger.i('üîÑ –í—Å–µ circuit breakers —Å–±—Ä–æ—à–µ–Ω—ã');

      // 9. –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
      manager.dispose();
      _logger.i('‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É');

    } catch (e, stackTrace) {
      _logger.e('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ ApiClientManager', error: e, stackTrace: stackTrace);
    }
  }
}

/// –ü—Ä–∏–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
class ApiMonitoringExample {
  static final _logger = AppLoggers.suppliers;

  /// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  static Future<void> demonstrateMonitoring() async {
    _logger.i('=== –ü—Ä–∏–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ API ===');

    try {
      // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
      final diagnostics = OptimizedApiClientFactory.getAllDiagnostics();
      _logger.i('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:');

      diagnostics.forEach((clientName, clientDiagnostics) {
        _logger.i('üìã –ö–ª–∏–µ–Ω—Ç: $clientName');
        _logger.i('  Circuit Breaker: ${clientDiagnostics['circuitBreaker']?['state']}');
        _logger.i('  –ë–∞–∑–æ–≤—ã–π URL: ${clientDiagnostics['config']?['baseUrl']}');
        
        final metrics = clientDiagnostics['metrics'];
        if (metrics != null) {
          _logger.i('  –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã: ${metrics.keys.length} endpoint(–æ–≤)');
        }

        final cache = clientDiagnostics['cache'];
        if (cache != null) {
          _logger.i('  –ö—ç—à: ${cache['hitRate']}% hit rate');
        }
      });

      // 2. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      final healthReport = OptimizedApiClientFactory.generateHealthReport();
      _logger.i('üìã –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã:');
      _logger.i('  –í—Ä–µ–º—è: ${healthReport['timestamp']}');
      _logger.i('  –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${healthReport['summary']['totalClients']}');
      _logger.i('  –ó–¥–æ—Ä–æ–≤—ã—Ö: ${healthReport['summary']['healthyClients']}');
      _logger.i('  –û—Ç–∫—Ä—ã—Ç—ã—Ö circuit breakers: ${healthReport['summary']['openCircuitBreakers']}');

      // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      final performanceStats = OptimizedApiClientFactory.getPerformanceStats();
      _logger.i('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:');
      _logger.i('  –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: ${performanceStats['timestamp']}');
      _logger.i('  –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${performanceStats['totalClients']}');

      // 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      _logger.i('üö® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö circuit breakers
      await OptimizedApiClientFactory.forceCloseAllCircuitBreakers();
      _logger.i('  ‚úÖ –í—Å–µ circuit breakers –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã');

      // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–µ—à–µ–π
      await OptimizedApiClientFactory.clearAllCaches();
      _logger.i('  üóëÔ∏è –í—Å–µ –∫–µ—à–∏ –æ—á–∏—â–µ–Ω—ã');

      // –°–±—Ä–æ—Å –≤—Å–µ—Ö circuit breakers
      OptimizedApiClientFactory.resetAllCircuitBreakers();
      _logger.i('  üîÑ –í—Å–µ circuit breakers —Å–±—Ä–æ—à–µ–Ω—ã');

    } catch (e, stackTrace) {
      _logger.e('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞', error: e, stackTrace: stackTrace);
    }
  }
}

/// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
class ApiOptimizationExamples {
  static final _logger = AppLoggers.suppliers;

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  static Future<void> runAllExamples() async {
    _logger.i('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π API —Å–∏—Å—Ç–µ–º—ã');

    try {
      // 1. –ü—Ä–∏–º–µ—Ä Armtek API
      await ArmtekApiExample.demonstrateArmtekApiUsage();

      // 2. –ü—Ä–∏–º–µ—Ä Parts Catalog API
      await PartsCatalogApiExample.demonstratePartsCatalogUsage();

      // 3. –ü—Ä–∏–º–µ—Ä ApiClientManager
      await ApiClientManagerExample.demonstrateApiClientManager();

      // 4. –ü—Ä–∏–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      await ApiMonitoringExample.demonstrateMonitoring();

      _logger.i('‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');

    } catch (e, stackTrace) {
      _logger.e('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤', error: e, stackTrace: stackTrace);
    }
  }

  /// –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å retry –∏ circuit breaker
  static Future<void> demonstrateErrorHandling() async {
    _logger.i('=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ ===');

    try {
      final client = OptimizedApiClientFactory.createSupplierClient(
        supplierCode: 'armtek',
        baseUrl: 'http://invalid-url.test', // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        connectionMode: ApiConnectionMode.direct,
      );

      // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å—É
      // –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫,
      // –∞ –∑–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–µ—Ç circuit breaker
      await client.get('/test');

    } catch (e) {
      _logger.i('‚úÖ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ${e.toString()}');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ circuit breaker
      final supplierClient = OptimizedApiClientFactory.getSupplierClient('armtek');
      if (supplierClient != null) {
        final status = supplierClient.getCircuitBreakerStatus();
        _logger.i('üîí Circuit breaker —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${status['state']}');
      }
    }
  }
}

/// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏
class ApiTestingUtils {
  static final _logger = AppLoggers.suppliers;

  /// –°–∏–º—É–ª–∏—Ä—É–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ API
  static Future<void> simulateLoad(int requestCount) async {
    _logger.i('üî• –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏: $requestCount –∑–∞–ø—Ä–æ—Å–æ–≤');

    final client = OptimizedApiClientFactory.createSupplierClient(
      supplierCode: 'armtek',
      baseUrl: 'http://ws.armtek.ru/api',
      connectionMode: ApiConnectionMode.direct,
    );

    final futures = <Future>[];
    
    for (int i = 0; i < requestCount; i++) {
      futures.add(
        client.get('/ws_ping/index').then(
          (response) => response,
          onError: (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            return null;
          },
        ),
      );
    }

    await Future.wait(futures);
    
    final metrics = client.getMetrics();
    _logger.i('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    if (metrics != null) {
      metrics.forEach((endpoint, stats) {
        _logger.i('  $endpoint: ${stats['totalRequests']} –∑–∞–ø—Ä–æ—Å–æ–≤, '
            '${stats['avgResponseTime']} —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è');
      });
    }
  }

  /// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –∫–µ—à–∞
  static Future<void> demonstrateCaching() async {
    _logger.i('üíæ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫–µ—à–∞');

    final client = OptimizedApiClientFactory.createSupplierClient(
      supplierCode: 'armtek', 
      baseUrl: 'http://ws.armtek.ru/api',
      connectionMode: ApiConnectionMode.direct,
    );

    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –±—É–¥–µ—Ç –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω
    _logger.i('üì• –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ)...');
    final start1 = DateTime.now();
    await client.get('/ws_ping/index');
    final duration1 = DateTime.now().difference(start1);
    _logger.i('‚è±Ô∏è –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${duration1.inMilliseconds}ms');

    // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å - –∏–∑ –∫–µ—à–∞
    _logger.i('üì§ –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–∏–∑ –∫–µ—à–∞)...');
    final start2 = DateTime.now();
    await client.get('/ws_ping/index');
    final duration2 = DateTime.now().difference(start2);
    _logger.i('‚è±Ô∏è –í—Ä–µ–º—è –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${duration2.inMilliseconds}ms');

    final cacheStats = client.getCacheStats();
    if (cacheStats != null) {
      _logger.i('üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞: ${cacheStats['hitRate']}% hit rate');
    }
  }
}