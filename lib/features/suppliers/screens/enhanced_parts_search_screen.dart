import 'package:flutter/material.dart';

import 'package:flutter_riverpod/flutter_riverpod.dart';

import 'package:part_catalog/core/i18n/strings.g.dart';
import 'package:part_catalog/features/suppliers/models/base/part_price_response.dart';
import 'package:part_catalog/features/suppliers/providers/optimized_api_providers.dart';
import 'package:part_catalog/features/suppliers/providers/supplier_config_provider.dart';
import 'package:part_catalog/features/suppliers/widgets/part_price_list_item.dart';

/// –£–ª—É—á—à–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –ø–æ–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
class EnhancedPartsSearchScreen extends ConsumerStatefulWidget {
  const EnhancedPartsSearchScreen({super.key});

  @override
  ConsumerState<EnhancedPartsSearchScreen> createState() =>
      _EnhancedPartsSearchScreenState();
}

class _EnhancedPartsSearchScreenState
    extends ConsumerState<EnhancedPartsSearchScreen>
    with TickerProviderStateMixin {
  final TextEditingController _articleController = TextEditingController();
  final TextEditingController _brandController = TextEditingController();
  final _formKey = GlobalKey<FormState>();

  late TabController _tabController;

  bool _useCache = true;
  final List<String> _selectedSuppliers = [];

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    _articleController.dispose();
    _brandController.dispose();
    super.dispose();
  }

  void _performSearch() {
    if (_formKey.currentState?.validate() ?? false) {
      final articleNumber = _articleController.text.trim();
      final brand = _brandController.text.trim().isEmpty
          ? null
          : _brandController.text.trim();

      final optimizedParams = OptimizedPartsSearchParams(
        articleNumber: articleNumber,
        brand: brand,
        supplierCodes: _selectedSuppliers.isEmpty ? null : _selectedSuppliers,
        useCache: _useCache,
      );

      // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫
      ref.read(optimizedPartsSearchProvider(optimizedParams));
    }
  }

  void _clearSearch() {
    _articleController.clear();
    _brandController.clear();
    setState(() {
      _selectedSuppliers.clear();
    });
  }

  @override
  Widget build(BuildContext context) {
    final t = context.t;
    final enabledSuppliers = ref.watch(enabledSupplierConfigsProvider);

    return Scaffold(
      appBar: AppBar(
        title: const Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('–ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π'),
            Text(
              'üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫',
              style: TextStyle(fontSize: 12, fontWeight: FontWeight.normal),
            ),
          ],
        ),
        bottom: TabBar(
          controller: _tabController,
          tabs: const [
            Tab(icon: Icon(Icons.search), text: '–ü–æ–∏—Å–∫'),
            Tab(icon: Icon(Icons.analytics), text: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          _buildSearchTab(t, enabledSuppliers),
          _buildAnalyticsTab(),
        ],
      ),
    );
  }

  Widget _buildSearchTab(
    dynamic t, // –£–±–∏—Ä–∞–µ–º —Ç–∏–ø–∏–∑–∞—Ü–∏—é –ø–æ–∫–∞
    List<dynamic> enabledSuppliers,
  ) {
    return Column(
      children: [
        // –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞
        Card(
          margin: const EdgeInsets.all(16),
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Form(
              key: _formKey,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
                  TextFormField(
                    controller: _articleController,
                    decoration: const InputDecoration(
                      labelText: '–ù–æ–º–µ—Ä –∑–∞–ø—á–∞—Å—Ç–∏',
                      hintText: '–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª',
                      border: OutlineInputBorder(),
                      prefixIcon: Icon(Icons.search),
                    ),
                    validator: (value) {
                      if (value == null || value.trim().isEmpty) {
                        return '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø—á–∞—Å—Ç–∏';
                      }
                      return null;
                    },
                    onFieldSubmitted: (_) => _performSearch(),
                  ),

                  const SizedBox(height: 16),

                  TextFormField(
                    controller: _brandController,
                    decoration: const InputDecoration(
                      labelText: '–ë—Ä–µ–Ω–¥',
                      hintText: '–í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
                      border: OutlineInputBorder(),
                      prefixIcon: Icon(Icons.branding_watermark),
                    ),
                    onFieldSubmitted: (_) => _performSearch(),
                  ),

                  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
                  const SizedBox(height: 16),
                  const Divider(),
                  const Row(
                    children: [
                      Icon(Icons.tune),
                      SizedBox(width: 8),
                      Text(
                        '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
                        style: TextStyle(fontWeight: FontWeight.bold),
                      ),
                    ],
                  ),
                  const SizedBox(height: 12),
                  SwitchListTile(
                    title: const Text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à'),
                    subtitle: const Text('–£—Å–∫–æ—Ä—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã'),
                    value: _useCache,
                    onChanged: (value) => setState(() => _useCache = value),
                  ),
                  if (enabledSuppliers.isNotEmpty) ...[
                    const SizedBox(height: 8),
                    const Text(
                      '–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º:',
                      style: TextStyle(fontWeight: FontWeight.w500),
                    ),
                    const SizedBox(height: 8),
                    Wrap(
                      spacing: 8,
                      runSpacing: 8,
                      children: enabledSuppliers.map((supplier) {
                        final supplierCode = supplier.supplierCode as String;
                        final isSelected =
                            _selectedSuppliers.contains(supplierCode);

                        return FilterChip(
                          label: Text(supplier.displayName as String),
                          selected: isSelected,
                          onSelected: (selected) {
                            setState(() {
                              if (selected) {
                                _selectedSuppliers.add(supplierCode);
                              } else {
                                _selectedSuppliers.remove(supplierCode);
                              }
                            });
                          },
                        );
                      }).toList(),
                    ),
                  ],

                  const SizedBox(height: 24),

                  // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                  Row(
                    children: [
                      Expanded(
                        child: ElevatedButton.icon(
                          onPressed: _performSearch,
                          icon: const Icon(Icons.search),
                          label: const Text('–£–º–Ω—ã–π –ø–æ–∏—Å–∫'),
                        ),
                      ),
                      const SizedBox(width: 16),
                      OutlinedButton.icon(
                        onPressed: _clearSearch,
                        icon: const Icon(Icons.clear),
                        label: const Text('–û—á–∏—Å—Ç–∏—Ç—å'),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        ),

        // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        Expanded(
          child: _buildSearchResults(t),
        ),
      ],
    );
  }

  Widget _buildSearchResults(dynamic t) {
    return _buildOptimizedResults(t);
  }

  Widget _buildOptimizedResults(dynamic t) {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    final articleNumber = _articleController.text.trim();

    if (articleNumber.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.search_off, size: 64, color: Colors.grey),
            SizedBox(height: 16),
            Text(
              '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞',
              style: TextStyle(color: Colors.grey),
            ),
          ],
        ),
      );
    }

    final params = OptimizedPartsSearchParams(
      articleNumber: articleNumber,
      brand: _brandController.text.trim().isEmpty
          ? null
          : _brandController.text.trim(),
      supplierCodes: _selectedSuppliers.isEmpty ? null : _selectedSuppliers,
      useCache: _useCache,
    );

    final searchResultsAsync = ref.watch(optimizedPartsSearchProvider(params));

    return searchResultsAsync.when(
      data: (results) => _buildResultsList(results, t),
      loading: () => const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            CircularProgressIndicator(),
            SizedBox(height: 16),
            Text('üöÄ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫...'),
          ],
        ),
      ),
      error: (error, stack) => Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.error_outline, size: 64, color: Colors.red),
            const SizedBox(height: 16),
            Text(
              '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: $error',
              style: const TextStyle(color: Colors.red),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            ElevatedButton.icon(
              onPressed: () =>
                  ref.invalidate(optimizedPartsSearchProvider(params)),
              icon: const Icon(Icons.refresh),
              label: const Text('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'),
            ),
          ],
        ),
      ),
    );
  }


  Widget _buildResultsList(
    List<PartPriceModel> results,
    dynamic t,
  ) {
    if (results.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.search_off, size: 64, color: Colors.grey),
            SizedBox(height: 16),
            Text(
              '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
              style: TextStyle(color: Colors.grey),
            ),
          ],
        ),
      );
    }

    return Column(
      children: [
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        Container(
          padding: const EdgeInsets.all(16),
          color: Theme.of(context).colorScheme.surfaceContainerHighest,
          child: Row(
            children: [
              Icon(
                Icons.rocket_launch,
                size: 20,
              ),
              const SizedBox(width: 8),
              Text(
                '–ù–∞–π–¥–µ–Ω–æ: ${results.length}',
                style: const TextStyle(fontWeight: FontWeight.bold),
              ),
              const Spacer(),
              const Icon(Icons.cached, size: 16, color: Colors.green),
              const SizedBox(width: 4),
              const Text(
                '–ö–µ—à –∞–∫—Ç–∏–≤–µ–Ω',
                style: TextStyle(fontSize: 12, color: Colors.green),
              ),
            ],
          ),
        ),

        // –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        Expanded(
          child: ListView.builder(
            itemCount: results.length,
            itemBuilder: (context, index) {
              final part = results[index];
              return PartPriceListItem(
                part: part,
                onTap: () => _showPartDetails(part),
              );
            },
          ),
        ),
      ],
    );
  }

  Widget _buildAnalyticsTab() {
    return Consumer(
      builder: (context, ref, child) {
        final diagnosticsAsync = ref.watch(systemDiagnosticsProvider);

        return RefreshIndicator(
          onRefresh: () async {
            ref.read(systemDiagnosticsProvider.notifier).refresh();
          },
          child: ListView(
            padding: const EdgeInsets.all(16),
            children: [
              // –°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
              Card(
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Row(
                        children: [
                          Icon(Icons.dashboard),
                          SizedBox(width: 8),
                          Text(
                            '–°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
                            style: TextStyle(fontWeight: FontWeight.bold),
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),
                      diagnosticsAsync.when(
                        data: (diagnostics) =>
                            _buildDiagnosticsInfo(diagnostics),
                        loading: () =>
                            const Center(child: CircularProgressIndicator()),
                        error: (error, stack) => Text(
                          '–û—à–∏–±–∫–∞: $error',
                          style: const TextStyle(color: Colors.red),
                        ),
                      ),
                    ],
                  ),
                ),
              ),

              const SizedBox(height: 16),

              // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
              Card(
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Row(
                        children: [
                          Icon(Icons.settings),
                          SizedBox(width: 8),
                          Text(
                            '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π',
                            style: TextStyle(fontWeight: FontWeight.bold),
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),
                      Wrap(
                        spacing: 8,
                        runSpacing: 8,
                        children: [
                          ElevatedButton.icon(
                            onPressed: () => _resetAllCircuitBreakers(),
                            icon: const Icon(Icons.refresh),
                            label: const Text('–°–±—Ä–æ—Å–∏—Ç—å CB'),
                          ),
                          ElevatedButton.icon(
                            onPressed: () => _clearAllCaches(),
                            icon: const Icon(Icons.clear_all),
                            label: const Text('–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à–∏'),
                          ),
                          ElevatedButton.icon(
                            onPressed: () => _forceCloseCircuitBreakers(),
                            icon: const Icon(Icons.power_settings_new),
                            label: const Text('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å CB'),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildDiagnosticsInfo(Map<String, dynamic> diagnostics) {
    final systemStatus = diagnostics['system_status'] as Map<String, dynamic>?;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        if (systemStatus != null) ...[
          Text(
              '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: ${systemStatus['optimized_enabled'] ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}'),
          Text('–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: ${systemStatus['active_suppliers']}'),
          Text('–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${systemStatus['timestamp']}'),
          const SizedBox(height: 16),
        ],

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
        ...diagnostics.entries
            .where((entry) => entry.key != 'system_status')
            .map((entry) {
          final clientName = entry.key;
          final clientData = entry.value as Map<String, dynamic>;
          final cbStatus = clientData['circuitBreaker']?['state'] ?? 'UNKNOWN';

          return Padding(
            padding: const EdgeInsets.only(bottom: 8),
            child: Row(
              children: [
                Icon(
                  cbStatus == 'CLOSED'
                      ? Icons.check_circle
                      : cbStatus == 'OPEN'
                          ? Icons.error
                          : cbStatus == 'HALF_OPEN'
                              ? Icons.warning
                              : Icons.help,
                  color: cbStatus == 'CLOSED'
                      ? Colors.green
                      : cbStatus == 'OPEN'
                          ? Colors.red
                          : cbStatus == 'HALF_OPEN'
                              ? Colors.orange
                              : Colors.grey,
                  size: 16,
                ),
                const SizedBox(width: 8),
                Text('$clientName: $cbStatus'),
              ],
            ),
          );
        }),
      ],
    );
  }

  void _showPartDetails(PartPriceModel part) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(part.name.isNotEmpty ? part.name : part.article),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('–ê—Ä—Ç–∏–∫—É–ª: ${part.article}'),
            if (part.brand.isNotEmpty) Text('–ë—Ä–µ–Ω–¥: ${part.brand}'),
            Text('–¶–µ–Ω–∞: ${part.price.toStringAsFixed(2)} ‚ÇΩ'),
            Text('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${part.quantity}'),
            Text('–°—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏: ${part.deliveryDays} –¥–Ω–µ–π'),
            Text('–ü–æ—Å—Ç–∞–≤—â–∏–∫: ${part.supplierName}'),
            if (part.comment?.isNotEmpty ?? false)
              Text('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${part.comment}'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('–ó–∞–∫—Ä—ã—Ç—å'),
          ),
        ],
      ),
    );
  }

  Future<void> _resetAllCircuitBreakers() async {
    try {
      ref.read(systemDiagnosticsProvider.notifier).resetAllCircuitBreakers();

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('üîÑ –í—Å–µ circuit breakers —Å–±—Ä–æ—à–µ–Ω—ã')),
        );
        ref.read(systemDiagnosticsProvider.notifier).refresh();
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('‚ùå –û—à–∏–±–∫–∞: $e')),
        );
      }
    }
  }

  Future<void> _clearAllCaches() async {
    try {
      await ref.read(systemDiagnosticsProvider.notifier).clearAllCaches();

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('üóëÔ∏è –í—Å–µ –∫–µ—à–∏ –æ—á–∏—â–µ–Ω—ã')),
        );
        ref.read(systemDiagnosticsProvider.notifier).refresh();
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('‚ùå –û—à–∏–±–∫–∞: $e')),
        );
      }
    }
  }

  Future<void> _forceCloseCircuitBreakers() async {
    try {
      await ref
          .read(systemDiagnosticsProvider.notifier)
          .forceCloseAllCircuitBreakers();

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
              content: Text('‚ö° Circuit breakers –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã')),
        );
        ref.read(systemDiagnosticsProvider.notifier).refresh();
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('‚ùå –û—à–∏–±–∫–∞: $e')),
        );
      }
    }
  }
}
