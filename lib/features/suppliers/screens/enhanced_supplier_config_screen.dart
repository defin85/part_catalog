import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:part_catalog/core/navigation/app_routes.dart';
import 'package:part_catalog/core/widgets/adaptive_form_layout.dart';
import 'package:part_catalog/core/widgets/custom_text_form_field.dart';
import 'package:part_catalog/core/widgets/responsive_layout_builder.dart';
import 'package:part_catalog/features/suppliers/models/supplier_config.dart';
import 'package:part_catalog/features/suppliers/models/supplier_config_form_state.dart';
import 'package:part_catalog/features/suppliers/providers/optimized_api_providers.dart';
import 'package:part_catalog/features/suppliers/widgets/supplier_info_widget_factory.dart';
import 'package:part_catalog/features/suppliers/providers/supplier_config_provider.dart';

/// –£–ª—É—á—à–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
class EnhancedSupplierConfigScreen extends ConsumerStatefulWidget {
  final String? supplierCode;

  const EnhancedSupplierConfigScreen({
    super.key,
    this.supplierCode,
  });

  @override
  ConsumerState<EnhancedSupplierConfigScreen> createState() =>
      _EnhancedSupplierConfigScreenState();
}

class _EnhancedSupplierConfigScreenState
    extends ConsumerState<EnhancedSupplierConfigScreen>
    with TickerProviderStateMixin {
  final _formKey = GlobalKey<FormState>();
  late final TextEditingController _displayNameController;
  late final TextEditingController _baseUrlController;
  late final TextEditingController _usernameController;
  late final TextEditingController _passwordController;
  late final TextEditingController _apiKeyController;
  late final TextEditingController _customerCodeController;

  late final TabController _tabController;

  AuthenticationType _selectedAuthType = AuthenticationType.basic;
  bool _useProxy = false;
  bool _isEnabled = true;
  bool _hasChanges = false;
  String? _selectedVkorg;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);

    _displayNameController = TextEditingController();
    _baseUrlController = TextEditingController();
    _usernameController = TextEditingController();
    _passwordController = TextEditingController();
    _apiKeyController = TextEditingController();
    _customerCodeController = TextEditingController();

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
    for (final c in [
      _displayNameController,
      _baseUrlController,
      _usernameController,
      _passwordController,
      _apiKeyController,
      _customerCodeController,
    ]) {
      c.addListener(_markChanged);
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    WidgetsBinding.instance.addPostFrameCallback((_) async {
      if (widget.supplierCode != null) {
        await _loadExistingConfig();

        // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π URL –¥–ª—è Armtek –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π
        if (widget.supplierCode == 'armtek' &&
            _baseUrlController.text.isEmpty) {
          _baseUrlController.text = 'http://ws.armtek.ru/api';
        }
      }
    });
  }

  Future<void> _loadExistingConfig() async {
    try {
      final config =
          await ref.read(supplierConfigProvider(widget.supplierCode!).future);
      if (config != null && mounted) {
        setState(() {
          _displayNameController.text = config.displayName;
          _baseUrlController.text = config.apiConfig.baseUrl;
          _selectedAuthType = config.apiConfig.authType;
          _useProxy = config.apiConfig.proxyUrl != null;
          _isEnabled = config.isEnabled;
        });

        final creds = config.apiConfig.credentials;
        if (creds != null) {
          _usernameController.text = creds.username ?? '';
          _passwordController.text = creds.password ?? '';
          _apiKeyController.text = creds.apiKey ?? '';
          _selectedVkorg = creds.additionalParams?['VKORG'];
        }

        final businessConfig = config.businessConfig;
        if (businessConfig != null) {
          _customerCodeController.text = businessConfig.customerCode ?? '';
        }

        // –û–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ä–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        ref
            .read(supplierConfigFormProvider(widget.supplierCode).notifier)
            .updateConfig(config);

        // –°–±—Ä–æ—Å –ø—Ä–∏–∑–Ω–∞–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        _hasChanges = false;
      }
    } catch (e) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      debugPrint('Error loading config: $e');
    }
  }

  @override
  void dispose() {
    _tabController.dispose();
    _displayNameController.dispose();
    _baseUrlController.dispose();
    _usernameController.dispose();
    _passwordController.dispose();
    _apiKeyController.dispose();
    _customerCodeController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final formState =
        ref.watch(supplierConfigFormProvider(widget.supplierCode));
    const isOptimizedEnabledAsync = AsyncValue.data(true); // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–∞

    return Scaffold(
      appBar: AppBar(
        title: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(widget.supplierCode != null
                ? '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ${widget.supplierCode}'
                : '–ù–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫'),
            Consumer(
              builder: (context, ref, child) {
                return isOptimizedEnabledAsync.when(
                  data: (isOptimizedEnabled) => const Text(
                              'üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
                              style: TextStyle(
                                  fontSize: 12, fontWeight: FontWeight.normal),
                            ),
                  loading: () => const SizedBox.shrink(),
                  error: (_, __) => const SizedBox.shrink(),
                );
              },
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: _onCancelPressed,
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
        ],
        bottom: TabBar(
          controller: _tabController,
          tabs: const [
            Tab(icon: Icon(Icons.settings), text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'),
            Tab(icon: Icon(Icons.monitor_heart), text: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'),
            Tab(icon: Icon(Icons.analytics), text: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          isOptimizedEnabledAsync.when(
            data: (isOptimizedEnabled) =>
                _buildConfigTab(formState, isOptimizedEnabled),
            loading: () => const Center(child: CircularProgressIndicator()),
            error: (error, stack) => Center(child: Text('–û—à–∏–±–∫–∞: $error')),
          ),
          _buildMonitoringTab(),
          _buildStatsTab(),
        ],
      ),
    );
  }

  Widget _buildConfigTab(dynamic formState, bool isOptimizedEnabled) {
    return ResponsiveLayoutBuilder(
      small: (context, constraints) => _buildFormLayout(formState, isOptimizedEnabled, isMobile: true),
      medium: (context, constraints) => _buildFormLayout(formState, isOptimizedEnabled, isMobile: false),
      large: (context, constraints) => _buildFormLayout(formState, isOptimizedEnabled, isMobile: false),
    );
  }

  Widget _buildFormLayout(dynamic formState, bool isOptimizedEnabled, {required bool isMobile}) {
    return Form(
      key: _formKey,
      child: SingleChildScrollView(
        padding: EdgeInsets.all(isMobile ? 16.0 : 24.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            if (isOptimizedEnabled) ...[
              FullWidthField(
                child: Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            const Icon(Icons.rocket_launch, color: Colors.orange),
                            const SizedBox(width: 8),
                            const Text(
                              '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ API',
                              style: TextStyle(fontWeight: FontWeight.bold),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        const Text(
                          '–í–∫–ª—é—á–∞–µ—Ç –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ circuit breaker',
                          style: TextStyle(fontSize: 12, color: Colors.grey),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
              SizedBox(height: AdaptiveSpacing.sectionSpacing(context)),
            ],

            // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            FormSection(
              title: '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
              children: [
                AdaptiveFormLayout(
                  fields: [
                    CustomTextFormField(
                      controller: _displayNameController,
                      labelText: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
                      validator: (value) =>
                          value?.isEmpty ?? true ? '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ' : null,
                    ),
                    Container(
                      decoration: BoxDecoration(
                        border: Border.all(color: Colors.grey.shade300),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: SwitchListTile(
                        title: const Text('–ê–∫—Ç–∏–≤–µ–Ω'),
                        subtitle: const Text('–í–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –ø–æ–∏—Å–∫'),
                        value: _isEnabled,
                        onChanged: (value) => setState(() {
                          _isEnabled = value;
                          _hasChanges = true;
                        }),
                      ),
                    ),
                  ],
                ),
              ],
            ),

            SizedBox(height: AdaptiveSpacing.sectionSpacing(context)),

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
            FormSection(
              title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API',
              children: [
                AdaptiveFormLayout(
                  fields: [
                    CustomTextFormField(
                      controller: _baseUrlController,
                      labelText: 'URL API',
                      validator: (value) => value?.isEmpty ?? true ? '–í–≤–µ–¥–∏—Ç–µ URL' : null,
                    ),
                    DropdownButtonFormField<AuthenticationType>(
                      initialValue: _selectedAuthType,
                      decoration: const InputDecoration(
                        labelText: '–¢–∏–ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
                        border: OutlineInputBorder(),
                      ),
                      items: AuthenticationType.values.map((type) {
                        return DropdownMenuItem(
                          value: type,
                          child: Text(_getAuthTypeName(type)),
                        );
                      }).toList(),
                      onChanged: (value) {
                        if (value != null) {
                          setState(() {
                            _selectedAuthType = value;
                            _hasChanges = true;
                          });
                        }
                      },
                    ),
                    Container(
                      decoration: BoxDecoration(
                        border: Border.all(color: Colors.grey.shade300),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: SwitchListTile(
                        title: const Text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏'),
                        subtitle: const Text('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä'),
                        value: _useProxy,
                        onChanged: (value) => setState(() {
                          _useProxy = value;
                          _hasChanges = true;
                        }),
                      ),
                    ),
                  ],
                ),
                SizedBox(height: AdaptiveSpacing.fieldSpacing(context)),
                // –ü–æ–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                AdaptiveFormLayout(
                  fields: _buildAuthFields(),
                ),
              ],
            ),

            SizedBox(height: AdaptiveSpacing.sectionSpacing(context)),

            // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            if (widget.supplierCode == 'armtek') ...[
              FormSection(
                title: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã Armtek',
                children: [
                  AdaptiveFormLayout(
                    fields: [
                      _buildVkorgSelector(formState),
                      CustomTextFormField(
                        controller: _customerCodeController,
                        labelText: '–ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞',
                      ),
                    ],
                  ),
                ],
              ),
              SizedBox(height: AdaptiveSpacing.sectionSpacing(context)),
            ] else ...[
              FormSection(
                title: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
                children: [
                  AdaptiveFormLayout(
                    fields: [
                      CustomTextFormField(
                        controller: _customerCodeController,
                        labelText: '–ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞',
                      ),
                    ],
                  ),
                ],
              ),
              SizedBox(height: AdaptiveSpacing.sectionSpacing(context)),
            ],

            // –î–µ–π—Å—Ç–≤–∏—è Armtek
            if (widget.supplierCode == 'armtek') ...[
              FormSection(
                title: '–î–µ–π—Å—Ç–≤–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏',
                children: [
                  _buildArmtekActionButtons(formState, isMobile),
                ],
              ),
              SizedBox(height: AdaptiveSpacing.sectionSpacing(context)),
            ],

            // –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if (formState.validationErrors.isNotEmpty) ...[
              FullWidthField(
                child: Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.red.shade50,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: formState.validationErrors.map((error) {
                      return Text(
                        '‚Ä¢ $error',
                        style: TextStyle(color: Colors.red.shade700),
                      );
                    }).toList(),
                  ),
                ),
              ),
              SizedBox(height: AdaptiveSpacing.fieldSpacing(context)),
            ],

            // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            FullWidthField(
              child: ResponsiveLayoutBuilder(
                small: (context, constraints) => Column(
                  children: [
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton.icon(
                        onPressed: formState.isTesting ? null : _testConnection,
                        icon: formState.isTesting
                            ? const SizedBox(
                                width: 16,
                                height: 16,
                                child: CircularProgressIndicator(strokeWidth: 2),
                              )
                            : const Icon(Icons.wifi_tethering),
                        label: Text(formState.isTesting
                            ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...'
                            : 'Health Check'),
                      ),
                    ),
                    const SizedBox(height: 12),
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton.icon(
                        onPressed: formState.isLoading ? null : _saveConfig,
                        icon: formState.isLoading
                            ? const SizedBox(
                                width: 16,
                                height: 16,
                                child: CircularProgressIndicator(strokeWidth: 2),
                              )
                            : const Icon(Icons.save),
                        label: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
                      ),
                    ),
                  ],
                ),
                medium: (context, constraints) => Row(
                  children: [
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: formState.isTesting ? null : _testConnection,
                        icon: formState.isTesting
                            ? const SizedBox(
                                width: 16,
                                height: 16,
                                child: CircularProgressIndicator(strokeWidth: 2),
                              )
                            : const Icon(Icons.wifi_tethering),
                        label: Text(formState.isTesting
                            ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...'
                            : 'Health Check'),
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: formState.isLoading ? null : _saveConfig,
                        icon: formState.isLoading
                            ? const SizedBox(
                                width: 16,
                                height: 16,
                                child: CircularProgressIndicator(strokeWidth: 2),
                              )
                            : const Icon(Icons.save),
                        label: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
                      ),
                    ),
                  ],
                ),
                large: (context, constraints) => Row(
                  children: [
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: formState.isTesting ? null : _testConnection,
                        icon: formState.isTesting
                            ? const SizedBox(
                                width: 16,
                                height: 16,
                                child: CircularProgressIndicator(strokeWidth: 2),
                              )
                            : const Icon(Icons.wifi_tethering),
                        label: Text(formState.isTesting
                            ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...'
                            : 'Health Check'),
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: formState.isLoading ? null : _saveConfig,
                        icon: formState.isLoading
                            ? const SizedBox(
                                width: 16,
                                height: 16,
                                child: CircularProgressIndicator(strokeWidth: 2),
                              )
                            : const Icon(Icons.save),
                        label: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
                      ),
                    ),
                  ],
                ),
              ),
            ),

            // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if (formState.error != null) ...[
              SizedBox(height: AdaptiveSpacing.fieldSpacing(context)),
              FullWidthField(
                child: Text(
                  formState.error!,
                  style: TextStyle(color: Theme.of(context).colorScheme.error),
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  void _markChanged() {
    if (!_hasChanges) {
      setState(() {
        _hasChanges = true;
      });
    }
  }

  Future<void> _onCancelPressed() async {
    if (!_hasChanges) {
      context.go(AppRoutes.apiControlCenter);
      return;
    }

    final shouldDiscard = await showDialog<bool>(
          context: context,
          builder: (context) => AlertDialog(
            title: const Text('–í—ã–π—Ç–∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?'),
            content: const Text(
                '–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?'),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(false),
                child: const Text('–û—Ç–º–µ–Ω–∞'),
              ),
              TextButton(
                onPressed: () => Navigator.of(context).pop(true),
                style: TextButton.styleFrom(
                  foregroundColor: Theme.of(context).colorScheme.error,
                ),
                child: const Text('–í—ã–π—Ç–∏'),
              ),
            ],
          ),
        ) ??
        false;

    if (shouldDiscard && mounted) {
      context.go(AppRoutes.apiControlCenter);
    }
  }

  void _showDetailedSupplierInfo(BuildContext context, dynamic formState) {
    if (widget.supplierCode == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('–ö–æ–¥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω')),
      );
      return;
    }

    final supplierData = <String, dynamic>{
      'structure': formState.userInfo?.structure,
      'ftpData': formState.userInfo?.ftpData,
      'brandList': formState.config?.businessConfig?.brandList,
      'storeList': formState.config?.businessConfig?.storeList,
    };

    final infoWidget = SupplierInfoWidgetFactory.createInfoWidget(
      supplierCode: widget.supplierCode!,
      supplierData: supplierData,
    );

    if (infoWidget != null) {
      Navigator.of(context).push(
        MaterialPageRoute(
          builder: (context) => Scaffold(
            appBar: AppBar(
              title: Text('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ${widget.supplierCode}'),
            ),
            body: infoWidget,
          ),
        ),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–í–∏–¥–∂–µ—Ç –¥–ª—è ${widget.supplierCode} –Ω–µ –Ω–∞–π–¥–µ–Ω')),
      );
    }
  }

  Widget _buildMonitoringTab() {
    if (widget.supplierCode == null) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.monitor_heart_outlined, size: 64, color: Colors.grey),
            SizedBox(height: 16),
            Text(
              '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è\n—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤',
              textAlign: TextAlign.center,
              style: TextStyle(color: Colors.grey),
            ),
          ],
        ),
      );
    }

    return Consumer(
      builder: (context, ref, child) {
        final healthStatusAsync =
            ref.watch(supplierHealthStatusProvider(widget.supplierCode!));

        return RefreshIndicator(
          onRefresh: () async {
            ref.invalidate(supplierHealthStatusProvider(widget.supplierCode!));
          },
          child: ListView(
            padding: const EdgeInsets.all(16),
            children: [
              // –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
              Card(
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          const Icon(Icons.health_and_safety),
                          const SizedBox(width: 8),
                          const Text(
                            '–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã',
                            style: TextStyle(fontWeight: FontWeight.bold),
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),
                      healthStatusAsync.when(
                        data: (status) => _buildHealthStatus(status),
                        loading: () =>
                            const Center(child: CircularProgressIndicator()),
                        error: (error, stack) => Text(
                          '–û—à–∏–±–∫–∞: $error',
                          style: const TextStyle(color: Colors.red),
                        ),
                      ),
                    ],
                  ),
                ),
              ),

              const SizedBox(height: 16),

              // Circuit Breaker —Å—Ç–∞—Ç—É—Å
              Card(
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          const Icon(Icons.electrical_services),
                          const SizedBox(width: 8),
                          const Text(
                            'Circuit Breaker',
                            style: TextStyle(fontWeight: FontWeight.bold),
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),
                      healthStatusAsync.when(
                        data: (status) => _buildCircuitBreakerStatus(
                            status['circuit_breaker']),
                        loading: () =>
                            const Center(child: CircularProgressIndicator()),
                        error: (error, stack) => Text(
                          '–û—à–∏–±–∫–∞: $error',
                          style: const TextStyle(color: Colors.red),
                        ),
                      ),
                    ],
                  ),
                ),
              ),

              const SizedBox(height: 16),

              // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
              Row(
                children: [
                  Expanded(
                    child: ElevatedButton.icon(
                      onPressed: () => _resetCircuitBreaker(),
                      icon: const Icon(Icons.refresh),
                      label: const Text('–°–±—Ä–æ—Å–∏—Ç—å CB'),
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: ElevatedButton.icon(
                      onPressed: () => _clearCache(),
                      icon: const Icon(Icons.clear_all),
                      label: const Text('–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à'),
                    ),
                  ),
                ],
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildStatsTab() {
    if (widget.supplierCode == null) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.analytics_outlined, size: 64, color: Colors.grey),
            SizedBox(height: 16),
            Text(
              '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è\n—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤',
              textAlign: TextAlign.center,
              style: TextStyle(color: Colors.grey),
            ),
          ],
        ),
      );
    }

    return Consumer(
      builder: (context, ref, child) {
        final healthStatusAsync =
            ref.watch(supplierHealthStatusProvider(widget.supplierCode!));

        return RefreshIndicator(
          onRefresh: () async {
            ref.invalidate(supplierHealthStatusProvider(widget.supplierCode!));
          },
          child: ListView(
            padding: const EdgeInsets.all(16),
            children: [
              // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
              Card(
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          const Icon(Icons.speed),
                          const SizedBox(width: 8),
                          const Text(
                            '–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
                            style: TextStyle(fontWeight: FontWeight.bold),
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),
                      healthStatusAsync.when(
                        data: (status) => _buildMetrics(status['metrics']),
                        loading: () =>
                            const Center(child: CircularProgressIndicator()),
                        error: (error, stack) => Text(
                          '–û—à–∏–±–∫–∞: $error',
                          style: const TextStyle(color: Colors.red),
                        ),
                      ),
                    ],
                  ),
                ),
              ),

              const SizedBox(height: 16),

              // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞
              Card(
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          const Icon(Icons.storage),
                          const SizedBox(width: 8),
                          const Text(
                            '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞',
                            style: TextStyle(fontWeight: FontWeight.bold),
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),
                      healthStatusAsync.when(
                        data: (status) => _buildCacheStats(status['cache']),
                        loading: () =>
                            const Center(child: CircularProgressIndicator()),
                        error: (error, stack) => Text(
                          '–û—à–∏–±–∫–∞: $error',
                          style: const TextStyle(color: Colors.red),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildHealthStatus(Map<String, dynamic> status) {
    final isHealthy = status['healthy'] as bool? ?? false;
    final statusText = status['status'] as String? ?? 'unknown';

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(
              isHealthy ? Icons.check_circle : Icons.error,
              color: isHealthy ? Colors.green : Colors.red,
            ),
            const SizedBox(width: 8),
            Text(
              isHealthy ? '–ó–¥–æ—Ä–æ–≤' : '–ù–µ–∑–¥–æ—Ä–æ–≤',
              style: TextStyle(
                color: isHealthy ? Colors.green : Colors.red,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        Text('–°—Ç–∞—Ç—É—Å: $statusText'),
        if (status['message'] != null) Text('–°–æ–æ–±—â–µ–Ω–∏–µ: ${status['message']}'),
        Text('–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${status['timestamp']}'),
      ],
    );
  }

  Widget _buildCircuitBreakerStatus(Map<String, dynamic>? cbStatus) {
    if (cbStatus == null) {
      return const Text('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }

    final state = cbStatus['state'] as String? ?? 'UNKNOWN';
    final failureCount = cbStatus['failureCount'] as int? ?? 0;

    Color stateColor;
    IconData stateIcon;

    switch (state) {
      case 'CLOSED':
        stateColor = Colors.green;
        stateIcon = Icons.check_circle;
        break;
      case 'OPEN':
        stateColor = Colors.red;
        stateIcon = Icons.error;
        break;
      case 'HALF_OPEN':
        stateColor = Colors.orange;
        stateIcon = Icons.warning;
        break;
      default:
        stateColor = Colors.grey;
        stateIcon = Icons.help;
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(stateIcon, color: stateColor),
            const SizedBox(width: 8),
            Text(
              state,
              style: TextStyle(
                color: stateColor,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        Text('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: $failureCount'),
      ],
    );
  }

  Widget _buildMetrics(Map<String, dynamic>? metrics) {
    if (metrics == null || metrics.isEmpty) {
      return const Text('–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: metrics.entries.map((entry) {
        final endpoint = entry.key;
        final stats = entry.value as Map<String, dynamic>;

        return Padding(
          padding: const EdgeInsets.only(bottom: 8),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                endpoint,
                style: const TextStyle(fontWeight: FontWeight.bold),
              ),
              Text('–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats['totalRequests'] ?? 0}'),
              Text('–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${stats['avgResponseTime'] ?? 0}ms'),
              Text('–ß–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫: ${stats['errorRate'] ?? 0}%'),
            ],
          ),
        );
      }).toList(),
    );
  }

  Widget _buildCacheStats(Map<String, dynamic>? cacheStats) {
    if (cacheStats == null) {
      return const Text('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('Hit Rate: ${cacheStats['hitRate'] ?? 0}%'),
        Text('–≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–µ—à–µ: ${cacheStats['itemCount'] ?? 0}'),
        Text('–†–∞–∑–º–µ—Ä –∫–µ—à–∞: ${cacheStats['cacheSize'] ?? 0} bytes'),
      ],
    );
  }

  List<Widget> _buildAuthFields() {
    switch (_selectedAuthType) {
      case AuthenticationType.basic:
        return [
          CustomTextFormField(
            controller: _usernameController,
            labelText: '–õ–æ–≥–∏–Ω',
            validator: (value) =>
                value?.isEmpty ?? true ? '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω' : null,
          ),
          const SizedBox(height: 16),
          TextFormField(
            controller: _passwordController,
            decoration: const InputDecoration(
              labelText: '–ü–∞—Ä–æ–ª—å',
              border: OutlineInputBorder(),
            ),
            obscureText: true,
            validator: (value) =>
                value?.isEmpty ?? true ? '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å' : null,
          ),
        ];

      case AuthenticationType.apiKey:
        return [
          CustomTextFormField(
            controller: _apiKeyController,
            labelText: 'API –∫–ª—é—á',
            validator: (value) =>
                value?.isEmpty ?? true ? '–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á' : null,
          ),
        ];

      default:
        return [];
    }
  }

  String _getAuthTypeName(AuthenticationType type) {
    switch (type) {
      case AuthenticationType.none:
        return '–ë–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏';
      case AuthenticationType.basic:
        return '–õ–æ–≥–∏–Ω/–ü–∞—Ä–æ–ª—å';
      case AuthenticationType.apiKey:
        return 'API –∫–ª—é—á';
      case AuthenticationType.bearer:
        return 'Bearer —Ç–æ–∫–µ–Ω';
      case AuthenticationType.oauth2:
        return 'OAuth 2.0';
      case AuthenticationType.custom:
        return '–î—Ä—É–≥–æ–π';
    }
  }

  void _updateFormConfig() {
    final config = SupplierConfig(
      supplierCode: widget.supplierCode ??
          _displayNameController.text.toLowerCase().replaceAll(' ', '_'),
      displayName: _displayNameController.text,
      isEnabled: _isEnabled,
      apiConfig: SupplierApiConfig(
        baseUrl: _baseUrlController.text,
        authType: _selectedAuthType,
        credentials: SupplierCredentials(
          username: _usernameController.text.isNotEmpty
              ? _usernameController.text
              : null,
          password: _passwordController.text.isNotEmpty
              ? _passwordController.text
              : null,
          apiKey:
              _apiKeyController.text.isNotEmpty ? _apiKeyController.text : null,
          additionalParams: _selectedVkorg?.isNotEmpty == true
              ? {'VKORG': _selectedVkorg!}
              : null,
        ),
        proxyUrl: _useProxy
            ? 'http://proxy.example.com'
            : null, // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –¥–ª—è –ø—Ä–æ–∫—Å–∏
      ),
      businessConfig: SupplierBusinessConfig(
        customerCode: _customerCodeController.text.isNotEmpty
            ? _customerCodeController.text
            : null,
        organizationCode:
            _selectedVkorg?.isNotEmpty == true ? _selectedVkorg : null,
      ),
    );

    ref
        .read(supplierConfigFormProvider(widget.supplierCode).notifier)
        .updateConfig(config);
  }

  Future<void> _testConnection() async {
    if (_formKey.currentState?.validate() ?? false) {
      _updateFormConfig();

      if (widget.supplierCode != null) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try {
          final notifier = ref.read(
              optimizedArmtekClientProvider(widget.supplierCode!).notifier);
          final success = await notifier.performHealthCheck();

          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text(success
                    ? '‚úÖ Health check —É—Å–ø–µ—à–µ–Ω'
                    : '‚ùå Health check –Ω–µ—É–¥–∞—á–µ–Ω'),
                backgroundColor: success ? Colors.green : Colors.red,
              ),
            );
          }
        } catch (e) {
          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('‚ùå –û—à–∏–±–∫–∞: $e'),
                backgroundColor: Colors.red,
              ),
            );
          }
        }
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
        await ref
            .read(supplierConfigFormProvider(widget.supplierCode).notifier)
            .testConnection();
      }
    }
  }

  Future<void> _saveConfig() async {
    if (_formKey.currentState?.validate() ?? false) {
      _updateFormConfig();

      final success = await ref
          .read(supplierConfigFormProvider(widget.supplierCode).notifier)
          .save();

      if (!mounted) return;

      if (success) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Text('üöÄ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)'),
          ),
        );
        context.go(AppRoutes.apiControlCenter);
      }
    }
  }

  Future<void> _resetCircuitBreaker() async {
    try {
      final notifier = ref
          .read(optimizedArmtekClientProvider(widget.supplierCode!).notifier);
      await notifier.resetCircuitBreaker();

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('üîÑ Circuit breaker —Å–±—Ä–æ—à–µ–Ω')),
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        ref.invalidate(supplierHealthStatusProvider(widget.supplierCode!));
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('‚ùå –û—à–∏–±–∫–∞: $e')),
        );
      }
    }
  }

  Future<void> _clearCache() async {
    try {
      final notifier = ref
          .read(optimizedArmtekClientProvider(widget.supplierCode!).notifier);
      await notifier.clearCache();

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('üóëÔ∏è –ö–µ—à –æ—á–∏—â–µ–Ω')),
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        ref.invalidate(supplierHealthStatusProvider(widget.supplierCode!));
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('‚ùå –û—à–∏–±–∫–∞: $e')),
        );
      }
    }
  }

  /// –í–∏–¥–∂–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ VKORG
  Widget _buildVkorgSelector(SupplierConfigFormState formState) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Expanded(
              child: Text(
                'VKORG (–ö–æ–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏)',
                style: Theme.of(context).textTheme.labelLarge?.copyWith(
                  color: Theme.of(context).colorScheme.onSurface,
                ),
              ),
            ),
            IconButton(
              icon: const Icon(Icons.help_outline, size: 20),
              onPressed: () => _showVkorgHelp(),
              tooltip: '–°–ø—Ä–∞–≤–∫–∞ –ø–æ VKORG',
            ),
          ],
        ),
        const SizedBox(height: 8),

        if (formState.availableVkorgList.isEmpty) ...[
          // –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ VKORG
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              border: Border.all(color: Colors.grey.shade300),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Column(
              children: [
                Icon(
                  Icons.download_rounded,
                  size: 48,
                  color: Colors.grey.shade500,
                ),
                const SizedBox(height: 8),
                Text(
                  '–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å,\n–∑–∞—Ç–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ø–∏—Å–æ–∫ VKORG',
                  textAlign: TextAlign.center,
                  style: TextStyle(color: Colors.grey.shade600),
                ),
                const SizedBox(height: 12),
                ElevatedButton.icon(
                  onPressed: formState.isLoadingVkorgList ||
                          _usernameController.text.isEmpty ||
                          _passwordController.text.isEmpty
                      ? null
                      : () => _loadVkorgList(),
                  icon: formState.isLoadingVkorgList
                      ? const SizedBox(
                          width: 16,
                          height: 16,
                          child: CircularProgressIndicator(strokeWidth: 2),
                        )
                      : const Icon(Icons.download),
                  label: Text(formState.isLoadingVkorgList
                      ? '–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...'
                      : '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ VKORG'),
                ),
              ],
            ),
          ),
        ] else ...[
          // Dropdown –¥–ª—è –≤—ã–±–æ—Ä–∞ VKORG
          DropdownButtonFormField<String>(
            initialValue: _selectedVkorg,
            decoration: const InputDecoration(
              border: OutlineInputBorder(),
              hintText: '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é',
            ),
            items: formState.availableVkorgList.map((vkorg) {
              return DropdownMenuItem<String>(
                value: vkorg.vkorg,
                child: Text('${vkorg.vkorg} - ${vkorg.programName}'),
              );
            }).toList(),
            onChanged: (value) {
              if (value != null) {
                setState(() {
                  _selectedVkorg = value;
                  _hasChanges = true;
                });
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
                ref
                    .read(supplierConfigFormProvider(widget.supplierCode).notifier)
                    .selectVkorg(value);
              }
            },
            validator: (value) =>
                value?.isEmpty ?? true ? '–í—ã–±–µ—Ä–∏—Ç–µ VKORG' : null,
          ),

          const SizedBox(height: 8),

          // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞
          Row(
            children: [
              TextButton.icon(
                onPressed: formState.isLoadingVkorgList
                    ? null
                    : () => _loadVkorgList(),
                icon: const Icon(Icons.refresh, size: 16),
                label: const Text('–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫'),
              ),
              const Spacer(),
              Text(
                '${formState.availableVkorgList.length} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π',
                style: Theme.of(context).textTheme.bodySmall,
              ),
            ],
          ),
        ],

        // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        if (formState.error != null &&
            formState.error!.contains('VKORG')) ...[
          const SizedBox(height: 8),
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.red.shade50,
              border: Border.all(color: Colors.red.shade200),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Row(
              children: [
                Icon(Icons.error_outline, color: Colors.red.shade700, size: 20),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    formState.error!,
                    style: TextStyle(color: Colors.red.shade700, fontSize: 12),
                  ),
                ),
              ],
            ),
          ),
        ],
      ],
    );
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ VKORG
  Future<void> _loadVkorgList() async {
    // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    _updateFormConfig();

    // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º VKORG
    await ref
        .read(supplierConfigFormProvider(widget.supplierCode).notifier)
        .loadVkorgList();
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ VKORG
  void _showVkorgHelp() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–°–ø—Ä–∞–≤–∫–∞: VKORG'),
        content: const SizedBox(
          width: 400,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('VKORG (Sales Organization) - —ç—Ç–æ –∫–æ–¥ —Å–±—ã—Ç–æ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –ê—Ä–º—Ç–µ–∫.'),
              SizedBox(height: 12),
              Text('–ö–∞–∂–¥–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏–º–µ–µ—Ç:'),
              Text('‚Ä¢ –°–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥'),
              Text('‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã'),
              Text('‚Ä¢ –ù–∞–±–æ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π'),
              SizedBox(height: 12),
              Text('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–≥–æ–≤–æ—Ä—É —Å –ê—Ä–º—Ç–µ–∫.'),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('–ü–æ–Ω—è—Ç–Ω–æ'),
          ),
        ],
      ),
    );
  }

  Widget _buildArmtekActionButtons(dynamic formState, bool isMobile) {
    final actionButtons = [
      _buildActionButton(
        icon: Icons.person_search,
        label: '–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        onPressed: () {
          _updateFormConfig();
          ref.read(supplierConfigFormProvider(widget.supplierCode).notifier).loadUserInfo();
        },
      ),
      _buildActionButton(
        icon: Icons.branding_watermark,
        label: '–ó–∞–≥—Ä—É–∑–∏—Ç—å –±—Ä–µ–Ω–¥—ã',
        onPressed: () {
          _updateFormConfig();
          ref.read(supplierConfigFormProvider(widget.supplierCode).notifier).loadBrandList();
        },
      ),
      _buildActionButton(
        icon: Icons.warehouse,
        label: '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫–ª–∞–¥—ã',
        onPressed: () {
          _updateFormConfig();
          ref.read(supplierConfigFormProvider(widget.supplierCode).notifier).loadStoreList();
        },
      ),
      _buildActionButton(
        icon: Icons.open_in_new,
        label: '–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
        onPressed: () => _showDetailedSupplierInfo(context, formState),
      ),
    ];

    if (isMobile) {
      return Column(
        children: actionButtons.map((button) => Padding(
          padding: const EdgeInsets.only(bottom: 12),
          child: SizedBox(width: double.infinity, child: button),
        )).toList(),
      );
    } else {
      return Wrap(
        spacing: 12,
        runSpacing: 12,
        children: actionButtons,
      );
    }
  }

  Widget _buildActionButton({
    required IconData icon,
    required String label,
    required VoidCallback onPressed,
  }) {
    return ElevatedButton.icon(
      onPressed: onPressed,
      icon: Icon(icon),
      label: Text(label),
      style: ElevatedButton.styleFrom(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
      ),
    );
  }
}
