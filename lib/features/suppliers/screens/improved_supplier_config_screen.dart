import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:part_catalog/core/ui/templates/scaffolds/tabbed_screen_scaffold.dart';
import 'package:part_catalog/features/suppliers/screens/tabs/basic_settings_tab.dart';
import 'package:part_catalog/features/suppliers/screens/tabs/connection_settings_tab.dart';
import 'package:part_catalog/features/suppliers/screens/tabs/parameters_tab.dart';
import 'package:part_catalog/features/suppliers/screens/tabs/testing_tab.dart';

/// –£–ª—É—á—à–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
///
/// –≠—Ç–æ—Ç —ç–∫—Ä–∞–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—é UI:
/// - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç TabbedScreenScaffold –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
/// - –ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏-–≤–∫–ª–∞–¥–∫–∞–º–∏
/// - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–∞
/// - –ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
/// - –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å Material Design 3
class ImprovedSupplierConfigScreen extends ConsumerWidget {
  final String? supplierCode;

  const ImprovedSupplierConfigScreen({
    super.key,
    this.supplierCode,
  });

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return TabbedScreenScaffold(
      title: _getTitle(supplierCode),
      actions: [
        IconButton(
          icon: const Icon(Icons.help_outline),
          onPressed: () => _showHelp(context),
          tooltip: '–°–ø—Ä–∞–≤–∫–∞',
        ),
      ],
      tabs: [
        TabConfig(
          icon: Icon(Icons.settings),
          label: '–û—Å–Ω–æ–≤–Ω—ã–µ',
          builder: () => BasicSettingsTab(supplierCode: supplierCode ?? ''),
        ),
        TabConfig(
          icon: Icon(Icons.wifi),
          label: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
          builder: () => ConnectionSettingsTab(supplierCode: supplierCode ?? ''),
        ),
        TabConfig(
          icon: Icon(Icons.tune),
          label: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã',
          builder: () => ParametersTab(supplierCode: supplierCode ?? ''),
        ),
        TabConfig(
          icon: Icon(Icons.science),
          label: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
          builder: () => TestingTab(supplierCode: supplierCode ?? ''),
        ),
      ],
      floatingActionButton: _buildSaveButton(context, ref),
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ UX
      keepAlive: true, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–æ–≤
      lazyLoad: false, // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–∞–±—ã —Å—Ä–∞–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
      adaptive: true, // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–∞
      enableForceClose: true, // –í–∫–ª—é—á–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
      showForceCloseButton: true, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
    );
  }

  String _getTitle(String? code) {
    switch (code?.toLowerCase()) {
      case 'armtek':
        return '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê—Ä–º—Ç–µ–∫';
      case 'custom':
        return '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞';
      default:
        return '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞';
    }
  }

  Widget _buildSaveButton(BuildContext context, WidgetRef ref) {
    return FloatingActionButton.extended(
      onPressed: () => _saveConfig(context, ref),
      icon: const Icon(Icons.save),
      label: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
    );
  }

  void _showHelp(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–°–ø—Ä–∞–≤–∫–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'),
        content: const SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤:',
                style: TextStyle(fontWeight: FontWeight.w500),
              ),
              SizedBox(height: 16),
              Text('üìã –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'),
              Text('‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'),
              Text('‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è'),
              SizedBox(height: 12),
              Text('üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'),
              Text('‚Ä¢ URL API –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'),
              Text('‚Ä¢ –¢–∏–ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'),
              Text('‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞'),
              SizedBox(height: 12),
              Text('‚öôÔ∏è –ë–∏–∑–Ω–µ—Å-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã'),
              Text('‚Ä¢ –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'),
              Text('‚Ä¢ –ö–æ–¥—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π'),
              SizedBox(height: 12),
              Text('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'),
              Text('‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API'),
              Text('‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö'),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('–ü–æ–Ω—è—Ç–Ω–æ'),
          ),
        ],
      ),
    );
  }

  Future<void> _saveConfig(BuildContext context, WidgetRef ref) async {
    try {
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Row(
              children: [
                Icon(Icons.check_circle, color: Colors.white),
                SizedBox(width: 8),
                Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'),
              ],
            ),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                const Icon(Icons.error, color: Colors.white),
                const SizedBox(width: 8),
                Expanded(child: Text('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: $e')),
              ],
            ),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
}