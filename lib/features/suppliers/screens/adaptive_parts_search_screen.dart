import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import 'package:part_catalog/core/widgets/adaptive_card.dart';
import 'package:part_catalog/core/widgets/adaptive_container.dart';
import 'package:part_catalog/core/widgets/adaptive_text.dart';
import 'package:part_catalog/core/widgets/adaptive_icon.dart';
import 'package:part_catalog/core/widgets/responsive_layout_builder.dart';
import 'package:part_catalog/features/suppliers/models/base/part_price_response.dart';
import 'package:part_catalog/features/suppliers/providers/optimized_api_providers.dart';
import 'package:part_catalog/features/suppliers/providers/supplier_config_provider.dart';
import 'package:part_catalog/features/suppliers/widgets/part_price_list_item.dart';

/// –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –ø–æ–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π
class AdaptivePartsSearchScreen extends ConsumerStatefulWidget {
  const AdaptivePartsSearchScreen({super.key});

  @override
  ConsumerState<AdaptivePartsSearchScreen> createState() => _AdaptivePartsSearchScreenState();
}

class _AdaptivePartsSearchScreenState extends ConsumerState<AdaptivePartsSearchScreen> {
  final TextEditingController _articleController = TextEditingController();
  final TextEditingController _brandController = TextEditingController();
  final _formKey = GlobalKey<FormState>();

  bool _useCache = true;
  final List<String> _selectedSuppliers = [];

  @override
  void dispose() {
    _articleController.dispose();
    _brandController.dispose();
    super.dispose();
  }

  void _performSearch() {
    if (_formKey.currentState?.validate() ?? false) {
      final articleNumber = _articleController.text.trim();
      final brand = _brandController.text.trim().isEmpty ? null : _brandController.text.trim();

      final optimizedParams = PartsSearchParams(
        articleNumber: articleNumber,
        brand: brand,
        supplierCodes: _selectedSuppliers.isEmpty ? null : _selectedSuppliers,
        useCache: _useCache,
      );

      ref.read(partsSearchProvider(optimizedParams));
    }
  }

  void _clearSearch() {
    _articleController.clear();
    _brandController.clear();
    setState(() {
      _selectedSuppliers.clear();
    });
  }

  @override
  Widget build(BuildContext context) {
    final enabledSuppliers = ref.watch(enabledSupplierConfigsProvider);

    return ResponsiveLayoutBuilder(
      small: (context, constraints) => _buildMobileLayout(enabledSuppliers),
      medium: (context, constraints) => _buildTabletLayout(enabledSuppliers),
      large: (context, constraints) => _buildDesktopLayout(enabledSuppliers),
      mediumBreakpoint: 600,
      largeBreakpoint: 1000,
    );
  }

  /// Mobile Layout - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–µ–∫ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
  Widget _buildMobileLayout(List<dynamic> enabledSuppliers) {
    return Scaffold(
      appBar: AppBar(
        title: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            '–ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π'.asAdaptiveHeadline(),
            'üöÄ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫'.asAdaptiveCaption(
              color: Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.7),
            ),
          ],
        ),
      ),
      body: Column(
        children: [
          // –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞
          AdaptiveCard(
            context: AdaptiveCardContext.primary,
            child: _buildSearchForm(enabledSuppliers, ScreenSize.small),
          ),
          // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
          Expanded(
            child: _buildSearchResults(ScreenSize.small),
          ),
        ],
      ),
    );
  }

  /// Tablet Layout - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout
  Widget _buildTabletLayout(List<dynamic> enabledSuppliers) {
    return Scaffold(
      appBar: AppBar(
        title: Row(
          children: [
            Icons.search.asAdaptiveNavigationIcon(),
            const SizedBox(width: 12),
            Expanded(
              child: '–ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π (–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π)'.asAdaptiveHeadline(),
            ),
          ],
        ),
      ),
      body: Row(
        children: [
          // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ñ–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞
          AdaptiveContainer.sidebar(
            child: _buildSearchForm(enabledSuppliers, ScreenSize.medium),
          ),
          const VerticalDivider(width: 1),
          // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          Expanded(
            flex: 2,
            child: _buildSearchResults(ScreenSize.medium),
          ),
        ],
      ),
    );
  }

  /// Desktop Layout - —Ç—Ä–µ—Ö–∫–æ–ª–æ–Ω–æ—á–Ω—ã–π layout
  Widget _buildDesktopLayout(List<dynamic> enabledSuppliers) {
    return Scaffold(
      appBar: AppBar(
        title: Row(
          children: [
            Icons.search.asAdaptiveNavigationIcon(),
            const SizedBox(width: 16),
            '–ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π'.asAdaptiveHeadline(),
            const Spacer(),
            'üöÄ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å'.asAdaptiveBodySecondary(),
          ],
        ),
        actions: [
          Icons.settings.asAdaptiveActionIcon(
            onTap: () => _showAdvancedSettings(enabledSuppliers),
            semanticLabel: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
          ),
          const SizedBox(width: 16),
        ],
      ),
      body: Row(
        children: [
          // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ñ–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞
          AdaptiveContainer.sidebar(
            child: _buildSearchForm(enabledSuppliers, ScreenSize.large),
          ),
          const VerticalDivider(width: 1),
          // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          Expanded(
            flex: 2,
            child: _buildSearchResults(ScreenSize.large),
          ),
          const VerticalDivider(width: 1),
          // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥–µ—Ç–∞–ª–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
          AdaptiveContainer(
            sizeConfig: const AdaptiveSizeConfig(
              desktopWidth: 300,
              minWidth: 250,
              maxWidth: 400,
            ),
            child: _buildSidePanel(ScreenSize.large),
          ),
        ],
      ),
    );
  }

  Widget _buildSearchForm(List<dynamic> enabledSuppliers, ScreenSize screenSize) {
    return AdaptiveContainer(
      padding: EdgeInsets.all(_getSpacing(screenSize)),
      child: Form(
        key: _formKey,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã
            if (screenSize != ScreenSize.small) ...[
              '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞'.asAdaptiveSubheadline(),
              SizedBox(height: _getSpacing(screenSize)),
            ],

            // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
            TextFormField(
              controller: _articleController,
              decoration: InputDecoration(
                labelText: '–ù–æ–º–µ—Ä –∑–∞–ø—á–∞—Å—Ç–∏',
                hintText: '–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª',
                border: const OutlineInputBorder(),
                prefixIcon: Icons.search.asAdaptiveButtonIcon(),
              ),
              validator: (value) {
                if (value == null || value.trim().isEmpty) {
                  return '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø—á–∞—Å—Ç–∏';
                }
                return null;
              },
              onFieldSubmitted: (_) => _performSearch(),
            ),

            SizedBox(height: _getSpacing(screenSize)),

            TextFormField(
              controller: _brandController,
              decoration: InputDecoration(
                labelText: '–ë—Ä–µ–Ω–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)',
                hintText: '–ù–∞–ø—Ä–∏–º–µ—Ä: Bosch, Febi',
                border: const OutlineInputBorder(),
                prefixIcon: Icons.business.asAdaptiveButtonIcon(),
              ),
              onFieldSubmitted: (_) => _performSearch(),
            ),

            SizedBox(height: _getSpacing(screenSize) * 1.5),

            // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            _buildActionButtons(screenSize),

            SizedBox(height: _getSpacing(screenSize)),

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
            _buildSearchSettings(enabledSuppliers, screenSize),
          ],
        ),
      ),
    );
  }

  Widget _buildActionButtons(ScreenSize screenSize) {
    if (screenSize == ScreenSize.large) {
      // Desktop: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
      return Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          ElevatedButton.icon(
            onPressed: _performSearch,
            icon: Icons.search.asAdaptiveButtonIcon(),
            label: '–ù–∞–π—Ç–∏'.asAdaptiveBody(fontWeight: FontWeight.w600),
          ),
          const SizedBox(height: 8),
          OutlinedButton(
            onPressed: _clearSearch,
            child: '–û—á–∏—Å—Ç–∏—Ç—å'.asAdaptiveBody(),
          ),
        ],
      );
    } else {
      // Mobile/Tablet: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
      return Row(
        children: [
          Expanded(
            child: ElevatedButton.icon(
              onPressed: _performSearch,
              icon: Icons.search.asAdaptiveButtonIcon(),
              label: '–ù–∞–π—Ç–∏'.asAdaptiveBody(fontWeight: FontWeight.w600),
            ),
          ),
          const SizedBox(width: 12),
          ElevatedButton(
            onPressed: _clearSearch,
            style: ElevatedButton.styleFrom(
              backgroundColor: Theme.of(context).colorScheme.surface,
              foregroundColor: Theme.of(context).colorScheme.onSurface,
            ),
            child: '–û—á–∏—Å—Ç–∏—Ç—å'.asAdaptiveBody(),
          ),
        ],
      );
    }
  }

  Widget _buildSearchSettings(List<dynamic> enabledSuppliers, ScreenSize screenSize) {
    return AdaptiveCard(
      context: AdaptiveCardContext.nested,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞'.asAdaptiveBodySecondary(fontWeight: FontWeight.w600),
          SizedBox(height: _getSpacing(screenSize) * 0.5),

          CheckboxListTile(
            title: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à'.asAdaptiveBody(),
            subtitle: '–ë—ã—Å—Ç—Ä–µ–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã'.asAdaptiveCaption(),
            value: _useCache,
            onChanged: (value) => setState(() {
              _useCache = value ?? true;
            }),
          ),

          if (enabledSuppliers.isNotEmpty) ...[
            const Divider(),
            Padding(
              padding: EdgeInsets.all(_getSpacing(screenSize) * 0.5),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ (–≤–∫–ª—é—á–µ–Ω–æ: ${enabledSuppliers.length})'
                      .asAdaptiveBodySecondary(fontWeight: FontWeight.w600),
                  SizedBox(height: _getSpacing(screenSize) * 0.5),
                  Wrap(
                    spacing: 8,
                    runSpacing: 8,
                    children: enabledSuppliers
                        .map((supplier) => FilterChip(
                              label: supplier.displayName.toString().asAdaptiveCaption(),
                              selected: _selectedSuppliers.contains(supplier.supplierCode),
                              onSelected: (selected) {
                                setState(() {
                                  if (selected) {
                                    _selectedSuppliers.add(supplier.supplierCode);
                                  } else {
                                    _selectedSuppliers.remove(supplier.supplierCode);
                                  }
                                });
                              },
                            ))
                        .toList(),
                  ),
                ],
              ),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildSearchResults(ScreenSize screenSize) {
    final searchParams = PartsSearchParams(
      articleNumber: _articleController.text.trim(),
      brand: _brandController.text.trim().isEmpty ? null : _brandController.text.trim(),
      supplierCodes: _selectedSuppliers.isEmpty ? null : _selectedSuppliers,
      useCache: _useCache,
    );

    if (_articleController.text.trim().isEmpty) {
      return _buildEmptyState(screenSize);
    }

    final searchResult = ref.watch(partsSearchProvider(searchParams));

    return AdaptiveContainer(
      padding: EdgeInsets.all(_getSpacing(screenSize)),
      child: searchResult.when(
        data: (results) => _buildResultsList(results, screenSize),
        loading: () => _buildLoadingIndicator(screenSize),
        error: (error, stack) => _buildErrorWidget(error, screenSize),
      ),
    );
  }

  Widget _buildResultsList(List<PartPriceModel> results, ScreenSize screenSize) {
    if (results.isEmpty) {
      return _buildNoResultsState(screenSize);
    }

    return Column(
      children: [
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        AdaptiveCard(
          context: AdaptiveCardContext.list,
          child: Row(
            children: [
              Icons.rocket_launch.asAdaptiveIcon(
                context: AdaptiveIconContext.decorative,
              ),
              SizedBox(width: _getSpacing(screenSize) * 0.5),
              '–ù–∞–π–¥–µ–Ω–æ: ${results.length}'.asAdaptiveBodySecondary(fontWeight: FontWeight.w600),
              const Spacer(),
              if (_useCache) ...[
                Icons.cached.asAdaptiveIcon(
                  context: AdaptiveIconContext.decorative,
                  color: Colors.green,
                ),
                SizedBox(width: _getSpacing(screenSize) * 0.25),
                '–ö–µ—à –∞–∫—Ç–∏–≤–µ–Ω'.asAdaptiveCaption(color: Colors.green),
              ],
            ],
          ),
        ),

        // –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        Expanded(
          child: _buildAdaptiveResultsList(results, screenSize),
        ),
      ],
    );
  }

  Widget _buildAdaptiveResultsList(List<PartPriceModel> results, ScreenSize screenSize) {
    if (screenSize == ScreenSize.large) {
      // Desktop: —Å–µ—Ç–∫–∞
      return GridView.builder(
        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 2,
          childAspectRatio: 3,
          crossAxisSpacing: 16,
          mainAxisSpacing: 16,
        ),
        itemCount: results.length,
        itemBuilder: (context, index) => AdaptiveCard(
          context: AdaptiveCardContext.grid,
          child: PartPriceListItem(part: results[index]),
        ),
      );
    } else {
      // Mobile/Tablet: —Å–ø–∏—Å–æ–∫
      return ListView.builder(
        itemCount: results.length,
        itemBuilder: (context, index) => AdaptiveCard(
          context: AdaptiveCardContext.list,
          child: PartPriceListItem(part: results[index]),
        ),
      );
    }
  }

  Widget _buildLoadingIndicator(ScreenSize screenSize) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const CircularProgressIndicator(),
          SizedBox(height: _getSpacing(screenSize)),
          '–ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π...'.asAdaptiveBody(),
        ],
      ),
    );
  }

  Widget _buildEmptyState(ScreenSize screenSize) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icons.search.asAdaptiveIcon(
            context: AdaptiveIconContext.decorative,
            customSize: screenSize == ScreenSize.large ? 64 : 48,
            color: Theme.of(context).colorScheme.outline,
          ),
          SizedBox(height: _getSpacing(screenSize)),
          '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞'.asAdaptiveSubheadline(),
          SizedBox(height: _getSpacing(screenSize) * 0.5),
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞ –≤—ã—à–µ'.asAdaptiveCaption(),
        ],
      ),
    );
  }

  Widget _buildNoResultsState(ScreenSize screenSize) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icons.search_off.asAdaptiveIcon(
            context: AdaptiveIconContext.decorative,
            customSize: screenSize == ScreenSize.large ? 64 : 48,
            color: Theme.of(context).colorScheme.outline,
          ),
          SizedBox(height: _getSpacing(screenSize)),
          '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'.asAdaptiveSubheadline(),
          SizedBox(height: _getSpacing(screenSize) * 0.5),
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞'.asAdaptiveCaption(),
        ],
      ),
    );
  }

  Widget _buildErrorWidget(Object error, ScreenSize screenSize) {
    return Center(
      child: AdaptiveCard(
        context: AdaptiveCardContext.modal,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icons.error_outline.asAdaptiveIcon(
              context: AdaptiveIconContext.decorative,
              customSize: 48,
              color: Theme.of(context).colorScheme.error,
            ),
            SizedBox(height: _getSpacing(screenSize)),
            '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞'.asAdaptiveSubheadline(),
            SizedBox(height: _getSpacing(screenSize) * 0.5),
            error.toString().asAdaptiveCaption(
              textAlign: TextAlign.center,
              maxLines: 3,
              overflow: TextOverflow.ellipsis,
            ),
            SizedBox(height: _getSpacing(screenSize)),
            ElevatedButton(
              onPressed: _performSearch,
              child: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'.asAdaptiveBody(),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSidePanel(ScreenSize screenSize) {
    return AdaptiveContainer(
      padding: EdgeInsets.all(_getSpacing(screenSize)),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          '–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è'.asAdaptiveSubheadline(),
          SizedBox(height: _getSpacing(screenSize)),

          // –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
          Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              OutlinedButton.icon(
                onPressed: () => _showSearchHistory(),
                icon: Icons.history.asAdaptiveButtonIcon(),
                label: '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞'.asAdaptiveBody(),
              ),
              const SizedBox(height: 8),
              OutlinedButton.icon(
                onPressed: () => _showFavorites(),
                icon: Icons.star.asAdaptiveButtonIcon(),
                label: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'.asAdaptiveBody(),
              ),
              const SizedBox(height: 8),
              OutlinedButton.icon(
                onPressed: () => _exportResults(),
                icon: Icons.download.asAdaptiveButtonIcon(),
                label: '–≠–∫—Å–ø–æ—Ä—Ç'.asAdaptiveBody(),
              ),
            ],
          ),

          const Divider(),

          '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'.asAdaptiveSubheadline(),
          SizedBox(height: _getSpacing(screenSize)),

          // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞
          '–ü–æ–∏—Å–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: 42'.asAdaptiveCaption(),
          '–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: 1,234'.asAdaptiveCaption(),
          '–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: 5'.asAdaptiveCaption(),
        ],
      ),
    );
  }

  void _showAdvancedSettings(List<dynamic> enabledSuppliers) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'.asAdaptiveSubheadline(),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            '–ó–¥–µ—Å—å –±—É–¥—É—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞'.asAdaptiveBody(),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: '–ó–∞–∫—Ä—ã—Ç—å'.asAdaptiveBody(),
          ),
        ],
      ),
    );
  }

  void _showSearchHistory() {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞
  }

  void _showFavorites() {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  }

  void _exportResults() {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  }

  double _getSpacing(ScreenSize screenSize) {
    switch (screenSize) {
      case ScreenSize.small:
        return 12.0;
      case ScreenSize.medium:
        return 16.0;
      case ScreenSize.large:
        return 20.0;
    }
  }
}